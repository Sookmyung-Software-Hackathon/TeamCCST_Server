{"version":3,"sources":["../browser/src/error/DataTypeNotSupportedError.ts"],"names":[],"mappings":";AAGA,OAAO,EAAC,YAAY,EAAC,MAAM,gBAAgB,CAAC;AAE5C;IAA+C,6CAAY;IACvD,mCAAY,MAAsB,EAAE,QAAoB,EAAE,QAAuB;QAAjF,YACI,iBAAO,SAIV;QAFG,IAAM,IAAI,GAAG,OAAO,QAAQ,KAAK,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAO,QAAS,CAAC,IAAI,CAAC;QAC5E,KAAI,CAAC,OAAO,GAAG,iBAAc,IAAI,gBAAS,MAAM,CAAC,cAAc,CAAC,UAAU,SAAI,MAAM,CAAC,YAAY,iCAA0B,QAAQ,iBAAa,CAAC;;IACrJ,CAAC;IACL,gCAAC;AAAD,CAPA,AAOC,CAP8C,YAAY,GAO1D","file":"DataTypeNotSupportedError.js","sourcesContent":["import {ColumnType} from \"../driver/types/ColumnTypes\";\nimport {DatabaseType} from \"../driver/types/DatabaseType\";\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\nimport {TypeORMError} from \"./TypeORMError\";\n\nexport class DataTypeNotSupportedError extends TypeORMError {\n    constructor(column: ColumnMetadata, dataType: ColumnType, database?: DatabaseType) {\n        super();\n\n        const type = typeof dataType === \"string\" ? dataType : (<any>dataType).name;\n        this.message = `Data type \"${type}\" in \"${column.entityMetadata.targetName}.${column.propertyName}\" is not supported by \"${database}\" database.`;\n    }\n}\n"],"sourceRoot":".."}