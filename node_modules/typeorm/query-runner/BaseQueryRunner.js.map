{"version":3,"sources":["../../src/query-runner/BaseQueryRunner.ts"],"names":[],"mappings":"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","file":"BaseQueryRunner.js","sourcesContent":["import {PostgresConnectionOptions} from \"../driver/postgres/PostgresConnectionOptions\";\nimport {Query} from \"../driver/Query\";\nimport {SqlInMemory} from \"../driver/SqlInMemory\";\nimport {SqlServerConnectionOptions} from \"../driver/sqlserver/SqlServerConnectionOptions\";\nimport {View} from \"../schema-builder/view/View\";\nimport {Connection} from \"../connection/Connection\";\nimport {Table} from \"../schema-builder/table/Table\";\nimport {EntityManager} from \"../entity-manager/EntityManager\";\nimport {TableColumn} from \"../schema-builder/table/TableColumn\";\nimport {Broadcaster} from \"../subscriber/Broadcaster\";\nimport {ReplicationMode} from \"../driver/types/ReplicationMode\";\nimport { TypeORMError } from \"../error/TypeORMError\";\nimport { EntityMetadata } from \"../metadata/EntityMetadata\";\nimport { TableForeignKey } from \"../schema-builder/table/TableForeignKey\";\nimport { OrmUtils } from \"../util/OrmUtils\";\nimport {MetadataTableType} from \"../driver/types/MetadataTableType\";\n\nexport abstract class BaseQueryRunner {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection used by this query runner.\n     */\n    connection: Connection;\n\n    /**\n     * Entity manager working only with current query runner.\n     */\n    manager: EntityManager;\n\n    /**\n     * Indicates if connection for this query runner is released.\n     * Once its released, query runner cannot run queries anymore.\n     */\n    isReleased = false;\n\n    /**\n     * Indicates if transaction is in progress.\n     */\n    isTransactionActive = false;\n\n    /**\n     * Stores temporarily user data.\n     * Useful for sharing data with subscribers.\n     */\n    data = {};\n\n    /**\n     * All synchronized tables in the database.\n     */\n    loadedTables: Table[] = [];\n\n    /**\n     * All synchronized views in the database.\n     */\n    loadedViews: View[] = [];\n\n    /**\n     * Broadcaster used on this query runner to broadcast entity events.\n     */\n    broadcaster: Broadcaster;\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Real database connection from a connection pool used to perform queries.\n     */\n    protected databaseConnection: any;\n\n    /**\n     * Indicates if special query runner mode in which sql queries won't be executed is enabled.\n     */\n    protected sqlMemoryMode: boolean = false;\n\n    /**\n     * Sql-s stored if \"sql in memory\" mode is enabled.\n     */\n    protected sqlInMemory: SqlInMemory = new SqlInMemory();\n\n    /**\n     * Mode in which query runner executes.\n     * Used for replication.\n     * If replication is not setup its value is ignored.\n     */\n    protected mode: ReplicationMode;\n\n    private cachedTablePaths: Record<string, string> = {};\n\n    // -------------------------------------------------------------------------\n    // Public Abstract Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Executes a given SQL query.\n     */\n    abstract query(query: string, parameters?: any[], useStructuredResult?: boolean): Promise<any>;\n\n    // -------------------------------------------------------------------------\n    // Protected Abstract Methods\n    // -------------------------------------------------------------------------\n\n    protected abstract loadTables(tablePaths?: string[]): Promise<Table[]>;\n\n    protected abstract loadViews(tablePaths?: string[]): Promise<View[]>;\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Loads given table's data from the database.\n     */\n    async getTable(tablePath: string): Promise<Table|undefined> {\n        this.loadedTables = await this.loadTables([tablePath]);\n        return this.loadedTables.length > 0 ? this.loadedTables[0] : undefined;\n    }\n\n    /**\n     * Loads all tables (with given names) from the database.\n     */\n    async getTables(tableNames?: string[]): Promise<Table[]> {\n        if (!tableNames) {\n            // Don't cache in this case.\n            // This is the new case & isn't used anywhere else anyway.\n            return await this.loadTables(tableNames);\n        }\n\n        this.loadedTables = await this.loadTables(tableNames);\n        return this.loadedTables;\n    }\n\n    /**\n     * Loads given view's data from the database.\n     */\n    async getView(viewPath: string): Promise<View|undefined> {\n        this.loadedViews = await this.loadViews([viewPath]);\n        return this.loadedViews.length > 0 ? this.loadedViews[0] : undefined;\n    }\n\n    /**\n     * Loads given view's data from the database.\n     */\n    async getViews(viewPaths?: string[]): Promise<View[]> {\n        this.loadedViews = await this.loadViews(viewPaths);\n        return this.loadedViews;\n    }\n\n    /**\n     * Enables special query runner mode in which sql queries won't be executed,\n     * instead they will be memorized into a special variable inside query runner.\n     * You can get memorized sql using getMemorySql() method.\n     */\n    enableSqlMemory(): void {\n        this.sqlInMemory = new SqlInMemory();\n        this.sqlMemoryMode = true;\n    }\n\n    /**\n     * Disables special query runner mode in which sql queries won't be executed\n     * started by calling enableSqlMemory() method.\n     *\n     * Previously memorized sql will be flushed.\n     */\n    disableSqlMemory(): void {\n        this.sqlInMemory = new SqlInMemory();\n        this.sqlMemoryMode = false;\n    }\n\n    /**\n     * Flushes all memorized sqls.\n     */\n    clearSqlMemory(): void {\n        this.sqlInMemory = new SqlInMemory();\n    }\n\n    /**\n     * Gets sql stored in the memory. Parameters in the sql are already replaced.\n     */\n    getMemorySql(): SqlInMemory {\n        return this.sqlInMemory;\n    }\n\n    /**\n     * Executes up sql queries.\n     */\n    async executeMemoryUpSql(): Promise<void> {\n        for (const {query, parameters} of this.sqlInMemory.upQueries) {\n            await this.query(query, parameters);\n        }\n    }\n\n    /**\n     * Executes down sql queries.\n     */\n    async executeMemoryDownSql(): Promise<void> {\n        for (const {query, parameters} of this.sqlInMemory.downQueries.reverse()) {\n            await this.query(query, parameters);\n        }\n    }\n\n    getReplicationMode(): ReplicationMode {\n        return this.mode;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets view from previously loaded views, otherwise loads it from database.\n     */\n    protected async getCachedView(viewName: string): Promise<View> {\n        const view = this.loadedViews.find(view => view.name === viewName);\n        if (view) return view;\n\n        const foundViews = await this.loadViews([viewName]);\n        if (foundViews.length > 0) {\n            this.loadedViews.push(foundViews[0]);\n            return foundViews[0];\n        } else {\n            throw new TypeORMError(`View \"${viewName}\" does not exist.`);\n        }\n    }\n\n    /**\n     * Gets table from previously loaded tables, otherwise loads it from database.\n     */\n    protected async getCachedTable(tableName: string): Promise<Table> {\n        if (tableName in this.cachedTablePaths) {\n            const tablePath = this.cachedTablePaths[tableName];\n            const table = this.loadedTables.find(table => this.getTablePath(table) === tablePath);\n\n            if (table) {\n                return table;\n            }\n        }\n\n        const foundTables = await this.loadTables([tableName]);\n\n        if (foundTables.length > 0) {\n            const foundTablePath = this.getTablePath(foundTables[0]);\n\n            const cachedTable = this.loadedTables.find((table) => this.getTablePath(table) === foundTablePath);\n\n            if (!cachedTable) {\n                this.cachedTablePaths[tableName] = this.getTablePath(foundTables[0]);\n                this.loadedTables.push(foundTables[0]);\n                return foundTables[0];\n            } else {\n                return cachedTable;\n            }\n        } else {\n            throw new TypeORMError(`Table \"${tableName}\" does not exist.`);\n        }\n    }\n\n    /**\n     * Replaces loaded table with given changed table.\n     */\n    protected replaceCachedTable(table: Table, changedTable: Table): void {\n        const oldTablePath = this.getTablePath(table);\n        const foundTable = this.loadedTables.find(loadedTable => this.getTablePath(loadedTable) === oldTablePath);\n\n        // Clean up the lookup cache..\n        for (const [key, cachedPath] of Object.entries(this.cachedTablePaths)) {\n            if (cachedPath === oldTablePath) {\n                this.cachedTablePaths[key] = this.getTablePath(changedTable);\n            }\n        }\n\n        if (foundTable) {\n            foundTable.database = changedTable.database;\n            foundTable.schema = changedTable.schema;\n            foundTable.name = changedTable.name;\n            foundTable.columns = changedTable.columns;\n            foundTable.indices = changedTable.indices;\n            foundTable.foreignKeys = changedTable.foreignKeys;\n            foundTable.uniques = changedTable.uniques;\n            foundTable.checks = changedTable.checks;\n            foundTable.justCreated = changedTable.justCreated;\n            foundTable.engine = changedTable.engine;\n        }\n    }\n\n    protected getTablePath(target: EntityMetadata | Table | View | TableForeignKey | string): string {\n        const parsed = this.connection.driver.parseTableName(target);\n\n        return this.connection.driver.buildTableName(\n            parsed.tableName,\n            parsed.schema,\n            parsed.database\n        );\n    }\n\n    protected getTypeormMetadataTableName(): string {\n        const options = <SqlServerConnectionOptions|PostgresConnectionOptions>this.connection.driver.options;\n        return this.connection.driver.buildTableName(\"typeorm_metadata\", options.schema, options.database);\n    }\n\n    /**\n     * Generates SQL query to insert a record into \"typeorm_metadata\" table.\n     */\n    protected insertTypeormMetadataSql({\n        database,\n        schema,\n        table,\n        type,\n        name,\n        value\n    }: {\n        database?: string,\n        schema?: string,\n        table?: string,\n        type: MetadataTableType\n        name: string,\n        value?: string\n    }): Query {\n        const [query, parameters] = this.connection.createQueryBuilder()\n            .insert()\n            .into(this.getTypeormMetadataTableName())\n            .values({ database: database, schema: schema, table: table, type: type, name: name, value: value })\n            .getQueryAndParameters();\n\n        return new Query(query, parameters);\n    }\n\n    /**\n     * Generates SQL query to delete a record from \"typeorm_metadata\" table.\n     */\n    protected deleteTypeormMetadataSql({\n        database,\n        schema,\n        table,\n        type,\n        name\n    }: {\n        database?: string,\n        schema?: string,\n        table?: string,\n        type: MetadataTableType,\n        name: string\n    }): Query {\n\n        const qb = this.connection.createQueryBuilder();\n        const deleteQb = qb.delete()\n            .from(this.getTypeormMetadataTableName())\n            .where(`${qb.escape(\"type\")} = :type`, { type })\n            .andWhere(`${qb.escape(\"name\")} = :name`, { name });\n\n        if (database) {\n            deleteQb.andWhere(`${qb.escape(\"database\")} = :database`, { database });\n        }\n\n        if (schema) {\n            deleteQb.andWhere(`${qb.escape(\"schema\")} = :schema`, { schema });\n        }\n\n        if (table) {\n            deleteQb.andWhere(`${qb.escape(\"table\")} = :table`, { table });\n        }\n\n        const [query, parameters] = deleteQb.getQueryAndParameters();\n        return new Query(query, parameters);\n    }\n\n    /**\n     * Checks if at least one of column properties was changed.\n     * Does not checks column type, length and autoincrement, because these properties changes separately.\n     */\n    protected isColumnChanged(oldColumn: TableColumn, newColumn: TableColumn, checkDefault?: boolean, checkComment?: boolean): boolean {\n        // this logs need to debug issues in column change detection. Do not delete it!\n\n        // console.log(\"charset ---------------\");\n        // console.log(oldColumn.charset !== newColumn.charset);\n        // console.log(oldColumn.charset, newColumn.charset);\n        // console.log(\"collation ---------------\");\n        // console.log(oldColumn.collation !== newColumn.collation);\n        // console.log(oldColumn.collation, newColumn.collation);\n        // console.log(\"precision ---------------\");\n        // console.log(oldColumn.precision !== newColumn.precision);\n        // console.log(oldColumn.precision, newColumn.precision);\n        // console.log(\"scale ---------------\");\n        // console.log(oldColumn.scale !== newColumn.scale);\n        // console.log(oldColumn.scale, newColumn.scale);\n        // console.log(\"default ---------------\");\n        // console.log((checkDefault && oldColumn.default !== newColumn.default));\n        // console.log(oldColumn.default, newColumn.default);\n        // console.log(\"isNullable ---------------\");\n        // console.log(oldColumn.isNullable !== newColumn.isNullable);\n        // console.log(oldColumn.isNullable, newColumn.isNullable);\n        // console.log(\"comment ---------------\");\n        // console.log((checkComment && oldColumn.comment !== newColumn.comment));\n        // console.log(oldColumn.comment, newColumn.comment);\n        // console.log(\"enum ---------------\");\n        // console.log(!OrmUtils.isArraysEqual(oldColumn.enum || [], newColumn.enum || []));\n        // console.log(oldColumn.enum, newColumn.enum);\n\n        return oldColumn.charset !== newColumn.charset\n            || oldColumn.collation !== newColumn.collation\n            || oldColumn.precision !== newColumn.precision\n            || oldColumn.scale !== newColumn.scale\n            || oldColumn.width !== newColumn.width // MySQL only\n            || oldColumn.zerofill !== newColumn.zerofill // MySQL only\n            || oldColumn.unsigned !== newColumn.unsigned // MySQL only\n            || oldColumn.asExpression !== newColumn.asExpression // MySQL only\n            || (checkDefault && oldColumn.default !== newColumn.default)\n            || oldColumn.onUpdate !== newColumn.onUpdate // MySQL only\n            || oldColumn.isNullable !== newColumn.isNullable\n            || (checkComment && oldColumn.comment !== newColumn.comment)\n            || !OrmUtils.isArraysEqual(oldColumn.enum || [], newColumn.enum || []);\n    }\n\n    /**\n     * Checks if column length is by default.\n     */\n    protected isDefaultColumnLength(table: Table, column: TableColumn, length: string): boolean {\n        // if table have metadata, we check if length is specified in column metadata\n        if (this.connection.hasMetadata(table.name)) {\n            const metadata = this.connection.getMetadata(table.name);\n            const columnMetadata = metadata.findColumnWithDatabaseName(column.name);\n\n            if (columnMetadata) {\n                const columnMetadataLength = this.connection.driver.getColumnLength(columnMetadata);\n                if (columnMetadataLength)\n                    return false;\n            }\n        }\n\n        if (this.connection.driver.dataTypeDefaults\n            && this.connection.driver.dataTypeDefaults[column.type]\n            && this.connection.driver.dataTypeDefaults[column.type].length) {\n            return this.connection.driver.dataTypeDefaults[column.type].length!.toString() === length.toString();\n        }\n\n        return false;\n    }\n\n    /**\n     * Checks if column precision is by default.\n     */\n    protected isDefaultColumnPrecision(table: Table, column: TableColumn, precision: number): boolean {\n        // if table have metadata, we check if length is specified in column metadata\n        if (this.connection.hasMetadata(table.name)) {\n            const metadata = this.connection.getMetadata(table.name);\n            const columnMetadata = metadata.findColumnWithDatabaseName(column.name);\n            if (columnMetadata && columnMetadata.precision !== null && columnMetadata.precision !== undefined)\n                return false;\n        }\n\n        if (this.connection.driver.dataTypeDefaults\n            && this.connection.driver.dataTypeDefaults[column.type]\n            && this.connection.driver.dataTypeDefaults[column.type].precision !== null\n            && this.connection.driver.dataTypeDefaults[column.type].precision !== undefined)\n            return this.connection.driver.dataTypeDefaults[column.type].precision === precision;\n\n        return false;\n    }\n\n    /**\n     * Checks if column scale is by default.\n     */\n    protected isDefaultColumnScale(table: Table, column: TableColumn, scale: number): boolean {\n        // if table have metadata, we check if length is specified in column metadata\n        if (this.connection.hasMetadata(table.name)) {\n            const metadata = this.connection.getMetadata(table.name);\n            const columnMetadata = metadata.findColumnWithDatabaseName(column.name);\n            if (columnMetadata && columnMetadata.scale !== null && columnMetadata.scale !== undefined)\n                return false;\n        }\n\n        if (this.connection.driver.dataTypeDefaults\n            && this.connection.driver.dataTypeDefaults[column.type]\n            && this.connection.driver.dataTypeDefaults[column.type].scale !== null\n            && this.connection.driver.dataTypeDefaults[column.type].scale !== undefined)\n            return this.connection.driver.dataTypeDefaults[column.type].scale === scale;\n\n        return false;\n    }\n\n    /**\n     * Executes sql used special for schema build.\n     */\n    protected async executeQueries(upQueries: Query|Query[], downQueries: Query|Query[]): Promise<void> {\n        if (upQueries instanceof Query)\n            upQueries = [upQueries];\n        if (downQueries instanceof Query)\n            downQueries = [downQueries];\n\n        this.sqlInMemory.upQueries.push(...upQueries);\n        this.sqlInMemory.downQueries.push(...downQueries);\n\n        // if sql-in-memory mode is enabled then simply store sql in memory and return\n        if (this.sqlMemoryMode === true)\n            return Promise.resolve() as Promise<any>;\n\n        for (const {query, parameters} of upQueries) {\n            await this.query(query, parameters);\n        }\n    }\n\n}\n"],"sourceRoot":".."}