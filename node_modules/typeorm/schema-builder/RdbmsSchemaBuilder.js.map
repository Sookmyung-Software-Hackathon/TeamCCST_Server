{"version":3,"sources":["../../src/schema-builder/RdbmsSchemaBuilder.ts"],"names":[],"mappings":";;;;AAAA,yEAAsE;AACtE,uCAAoC;AACpC,mDAAgD;AAChD,2DAAwD;AACxD,iDAA8C;AAO9C,gDAA6C;AAE7C,oEAAiE;AACjE,2DAAwD;AACxD,mDAAgD;AAChD,iDAA8C;AAC9C,yDAAsD;AACtD,oCAAiC;AACjC,8CAA2C;AAC3C,qFAAkF;AAElF;;;;;;;;;;;;;GAaG;AACH;IAUI,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,4BAAsB,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;IAC5C,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;OAEG;IACG,kCAAK,GAAX;;;;;;;wBACI,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC,iBAAiB,EAAE,CAAC;wBAEvD,2DAA2D;wBAC3D,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,QAAQ,CAAC;wBACvD,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC;wBAI7C,mBAAmB,GAAG,CACxB,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,YAAY,iCAAe,CAAC;4BACpD,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,yBAAyB,KAAK,MAAM,CAC/D,CAAC;6BAEE,mBAAmB,EAAnB,wBAAmB;wBACnB,qBAAM,IAAI,CAAC,WAAW,CAAC,gBAAgB,EAAE,EAAA;;wBAAzC,SAAyC,CAAC;;;;wBAI1C,qBAAM,IAAI,CAAC,8BAA8B,CAAC,IAAI,CAAC,WAAW,CAAC,EAAA;;wBAA3D,SAA2D,CAAC;wBAEtD,UAAU,GAAG,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,KAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,EAA3B,CAA2B,CAAC,CAAC;wBAE3F,qBAAM,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,UAAU,CAAC,EAAA;;wBAA5C,SAA4C,CAAC;wBAC7C,qBAAM,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAA;;wBAAnC,SAAmC,CAAC;wBAEpC,qBAAM,IAAI,CAAC,wCAAwC,EAAE,EAAA;;wBAArD,SAAqD,CAAC;6BAGlD,IAAI,CAAC,UAAU,CAAC,gBAAgB,EAAhC,wBAAgC;wBAChC,qBAAM,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,EAAA;;wBAApE,SAAoE,CAAC;;;6BAErE,mBAAmB,EAAnB,yBAAmB;wBACnB,qBAAM,IAAI,CAAC,WAAW,CAAC,iBAAiB,EAAE,EAAA;;wBAA1C,SAA0C,CAAC;;;;;;;;6BAMvC,mBAAmB,EAAnB,yBAAmB;wBACnB,qBAAM,IAAI,CAAC,WAAW,CAAC,mBAAmB,EAAE,EAAA;;wBAA5C,SAA4C,CAAC;;;;;;6BAGrD,MAAM,OAAK,CAAC;6BAGZ,qBAAM,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,EAAA;;wBAAhC,SAAgC,CAAC;;;;;;KAExC;IAED;;OAEG;IACG,2DAA8B,GAApC,UAAqC,WAAwB;;;;;6BACrD,CAAA,IAAI,CAAC,yBAAyB,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,YAAY,+BAAc,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,2BAA2B,CAAC,CAAA,EAArJ,wBAAqJ;wBACrJ,qBAAM,IAAI,CAAC,0BAA0B,CAAC,WAAW,CAAC,EAAA;;wBAAlD,SAAkD,CAAC;;;;;;KAE1D;IAED;;OAEG;IACG,gCAAG,GAAT;;;;;;;wBACI,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC,iBAAiB,EAAE,CAAC;;;;wBAG7C,UAAU,GAAG,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,KAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,EAA3B,CAA2B,CAAC,CAAC;wBAC3F,qBAAM,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,UAAU,CAAC,EAAA;;wBAA5C,SAA4C,CAAC;wBAC7C,qBAAM,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAA;;wBAAnC,SAAmC,CAAC;wBAEpC,IAAI,CAAC,WAAW,CAAC,eAAe,EAAE,CAAC;wBACnC,qBAAM,IAAI,CAAC,wCAAwC,EAAE,EAAA;;wBAArD,SAAqD,CAAC;6BAGlD,IAAI,CAAC,UAAU,CAAC,gBAAgB,EAAhC,wBAAgC;wBAChC,qBAAM,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,EAAA;;wBAApE,SAAoE,CAAC;;4BAEzE,sBAAO,IAAI,CAAC,WAAW,CAAC,YAAY,EAAE,EAAC;;wBAGvC,mFAAmF;wBACnF,2FAA2F;wBAC3F,sFAAsF;wBACtF,IAAI,CAAC,WAAW,CAAC,gBAAgB,EAAE,CAAC;wBACpC,qBAAM,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,EAAA;;wBAAhC,SAAgC,CAAC;;;;;;KAExC;IASD,sBAAc,qDAAqB;QAPnC,4EAA4E;QAC5E,oBAAoB;QACpB,4EAA4E;QAE5E;;WAEG;aACH;YACI,OAAO,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,MAAM,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,WAAW,IAAI,QAAQ,CAAC,SAAS,KAAK,cAAc,IAAI,QAAQ,CAAC,SAAS,KAAK,MAAM,EAA9F,CAA8F,CAAC,CAAC;QAC9J,CAAC;;;OAAA;IAKD,sBAAc,yDAAyB;QAHvC;;WAEG;aACH;YACI,OAAO,IAAI,CAAC,UAAU,CAAC,eAAe;iBACjC,MAAM,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,SAAS,KAAK,MAAM,IAAI,QAAQ,CAAC,WAAW,EAArD,CAAqD,CAAC;gBAC1E,+CAA+C;iBAC9C,IAAI,CAAC,qBAAS,CAAC,eAAe,CAAC,CAAC;QACzC,CAAC;;;OAAA;IAED;;;OAGG;IACa,qEAAwC,GAAxD;;;;4BACI,qBAAM,IAAI,CAAC,YAAY,EAAE,EAAA;;wBAAzB,SAAyB,CAAC;wBAC1B,qBAAM,IAAI,CAAC,kBAAkB,EAAE,EAAA;;wBAA/B,SAA+B,CAAC;wBAChC,qBAAM,IAAI,CAAC,cAAc,EAAE,EAAA;;wBAA3B,SAA2B,CAAC;wBAC5B,qBAAM,IAAI,CAAC,aAAa,EAAE,EAAA;;wBAA1B,SAA0B,CAAC;wBAC3B,qBAAM,IAAI,CAAC,iBAAiB,EAAE,EAAA;;wBAA9B,SAA8B,CAAC;wBAC/B,qBAAM,IAAI,CAAC,8BAA8B,EAAE,EAAA;;wBAA3C,SAA2C,CAAC;wBAC5C,6BAA6B;wBAC7B,qBAAM,IAAI,CAAC,aAAa,EAAE,EAAA;;wBAD1B,6BAA6B;wBAC7B,SAA0B,CAAC;wBAC3B,qBAAM,IAAI,CAAC,eAAe,EAAE,EAAA;;wBAA5B,SAA4B,CAAC;wBAC7B,qBAAM,IAAI,CAAC,kBAAkB,EAAE,EAAA;;wBAA/B,SAA+B,CAAC;wBAChC,qBAAM,IAAI,CAAC,aAAa,EAAE,EAAA;;wBAA1B,SAA0B,CAAC;wBAC3B,qBAAM,IAAI,CAAC,iBAAiB,EAAE,EAAA;;wBAA9B,SAA8B,CAAC;wBAC/B,qBAAM,IAAI,CAAC,kBAAkB,EAAE,EAAA;;wBAA/B,SAA+B,CAAC;wBAChC,qBAAM,IAAI,CAAC,gBAAgB,EAAE,EAAA;;wBAA7B,SAA6B,CAAC;wBAC9B,qBAAM,IAAI,CAAC,eAAe,EAAE,EAAA;;wBAA5B,SAA4B,CAAC;wBAC7B,qBAAM,IAAI,CAAC,mBAAmB,EAAE,EAAA;;wBAAhC,SAAgC,CAAC;wBACjC,qBAAM,IAAI,CAAC,gCAAgC,EAAE,EAAA;;wBAA7C,SAA6C,CAAC;wBAC9C,qBAAM,IAAI,CAAC,iBAAiB,EAAE,EAAA;;wBAA9B,SAA8B,CAAC;wBAC/B,qBAAM,IAAI,CAAC,WAAW,EAAE,EAAA;;wBAAxB,SAAwB,CAAC;;;;;KAC5B;IAEO,yCAAY,GAApB,UAAqB,MAAgE;QACjF,IAAM,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;QAE7D,OAAO,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,cAAc,CACxC,MAAM,CAAC,SAAS,EAChB,MAAM,CAAC,MAAM,IAAI,IAAI,CAAC,aAAa,EACnC,MAAM,CAAC,QAAQ,IAAI,IAAI,CAAC,eAAe,CAC1C,CAAC;IACN,CAAC;IAED;;OAEG;IACa,+CAAkB,GAAlC;;;;;;;;4CACe,QAAQ;;;;;wCACT,KAAK,GAAG,OAAK,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,YAAY,CAAC,KAAK,CAAC,KAAK,KAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,EAAxD,CAAwD,CAAC,CAAC;wCACpH,IAAI,CAAC,KAAK;8EACG;wCAGP,sBAAsB,GAAG,KAAK,CAAC,WAAW,CAAC,MAAM,CAAC,UAAA,eAAe;4CACnE,IAAM,UAAU,GAAG,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,UAAA,kBAAkB,IAAI,OAAA,CAC/D,CAAC,eAAe,CAAC,IAAI,KAAK,kBAAkB,CAAC,IAAI,CAAC;gDAClD,CAAC,KAAI,CAAC,YAAY,CAAC,eAAe,CAAC,KAAK,KAAI,CAAC,YAAY,CAAC,kBAAkB,CAAC,wBAAwB,CAAC,CAAC,CAC1G,EAHkE,CAGlE,CAAC,CAAC;4CACH,OAAO,CAAC,UAAU;mDACX,CAAC,UAAU,CAAC,QAAQ,IAAI,UAAU,CAAC,QAAQ,KAAK,eAAe,CAAC,QAAQ,CAAC;mDACzE,CAAC,UAAU,CAAC,QAAQ,IAAI,UAAU,CAAC,QAAQ,KAAK,eAAe,CAAC,QAAQ,CAAC,CAAC;wCACrF,CAAC,CAAC,CAAC;wCACH,IAAI,sBAAsB,CAAC,MAAM,KAAK,CAAC;8EAC1B;wCAEb,OAAK,UAAU,CAAC,MAAM,CAAC,cAAc,CAAC,kCAAgC,KAAK,CAAC,IAAI,UAAK,sBAAsB,CAAC,GAAG,CAAC,UAAA,YAAY,IAAI,OAAA,YAAY,CAAC,IAAI,EAAjB,CAAiB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAG,CAAC,CAAC;wCAEjK,sCAAsC;wCACtC,qBAAM,OAAK,WAAW,CAAC,eAAe,CAAC,KAAK,EAAE,sBAAsB,CAAC,EAAA;;wCADrE,sCAAsC;wCACtC,SAAqE,CAAC;;;;;;;;;wBArBnD,KAAA,sBAAA,IAAI,CAAC,qBAAqB,CAAA;;;;wBAAtC,QAAQ;sDAAR,QAAQ;;;;;;;;;;;;;;;;;;;;;;KAuBtB;IAED;;OAEG;IACa,yCAAY,GAA5B;;;;;;KAIC;IAED;;;;OAIG;IACa,0CAAa,GAA7B;;;;;;;;4CACe,QAAQ;;;;;wCACT,KAAK,GAAG,OAAK,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,YAAY,CAAC,KAAK,CAAC,KAAK,KAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,EAAxD,CAAwD,CAAC,CAAC;wCACpH,IAAI,CAAC,KAAK;8EACG;wCAEb,IAAI,QAAQ,CAAC,OAAO,CAAC,MAAM,KAAK,KAAK,CAAC,OAAO,CAAC,MAAM;8EACvC;wCAEP,sBAAsB,GAAG,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,UAAA,MAAM;4CACzD,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,WAAW;gDAClC,OAAO,WAAW,CAAC,IAAI,KAAK,MAAM,CAAC,YAAY;uDACxC,WAAW,CAAC,IAAI,KAAK,KAAI,CAAC,UAAU,CAAC,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC;uDACjE,WAAW,CAAC,UAAU,KAAK,MAAM,CAAC,UAAU;uDAC5C,WAAW,CAAC,QAAQ,KAAK,KAAI,CAAC,UAAU,CAAC,MAAM,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;4CACrF,CAAC,CAAC,CAAC;wCACP,CAAC,CAAC,CAAC;wCAEH,IAAI,sBAAsB,CAAC,MAAM,KAAK,CAAC,IAAI,sBAAsB,CAAC,MAAM,GAAG,CAAC;8EAC/D;wCAEP,mBAAmB,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,UAAA,WAAW;4CACxD,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,MAAM;gDAChC,OAAO,MAAM,CAAC,YAAY,KAAK,WAAW,CAAC,IAAI;uDACxC,KAAI,CAAC,UAAU,CAAC,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,KAAK,WAAW,CAAC,IAAI;uDACjE,MAAM,CAAC,UAAU,KAAK,WAAW,CAAC,UAAU;uDAC5C,KAAI,CAAC,UAAU,CAAC,MAAM,CAAC,iBAAiB,CAAC,MAAM,CAAC,KAAK,WAAW,CAAC,QAAQ,CAAC;4CACrF,CAAC,CAAC,CAAC;wCACP,CAAC,CAAC,CAAC;wCAEH,IAAI,mBAAmB,CAAC,MAAM,KAAK,CAAC,IAAI,mBAAmB,CAAC,MAAM,GAAG,CAAC;8EACzD;wCAEP,aAAa,GAAG,mBAAmB,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;wCACrD,aAAa,CAAC,IAAI,GAAG,sBAAsB,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC;wCAE5D,OAAK,UAAU,CAAC,MAAM,CAAC,cAAc,CAAC,uBAAoB,mBAAmB,CAAC,CAAC,CAAC,CAAC,IAAI,mBAAY,aAAa,CAAC,IAAI,OAAG,CAAC,CAAC;wCACxH,qBAAM,OAAK,WAAW,CAAC,YAAY,CAAC,KAAK,EAAE,mBAAmB,CAAC,CAAC,CAAC,EAAE,aAAa,CAAC,EAAA;;wCAAjF,SAAiF,CAAC;;;;;;;;;wBApC/D,KAAA,sBAAA,IAAI,CAAC,qBAAqB,CAAA;;;;wBAAtC,QAAQ;sDAAR,QAAQ;;;;;;;;;;;;;;;;;;;;;;KAsCtB;IAEe,2CAAc,GAA9B;;;;;;;;4CACe,QAAQ;;;;;wCACT,KAAK,GAAG,OAAK,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,YAAY,CAAC,KAAK,CAAC,KAAK,KAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,EAAxD,CAAwD,CAAC,CAAC;wCACpH,IAAI,CAAC,KAAK;8EACG;wCAEP,WAAW,GAAG,KAAK,CAAC,OAAO;6CAC5B,MAAM,CAAC,UAAA,UAAU;4CACd,IAAM,aAAa,GAAG,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,IAAI,KAAK,UAAU,CAAC,IAAI,EAA9B,CAA8B,CAAC,CAAC;4CACrF,IAAI,aAAa,EAAE;gDACf,IAAI,aAAa,CAAC,WAAW,KAAK,KAAK;oDACnC,OAAO,KAAK,CAAC;gDAEjB,IAAI,aAAa,CAAC,QAAQ,KAAK,UAAU,CAAC,QAAQ;oDAC9C,OAAO,IAAI,CAAC;gDAEhB,IAAI,aAAa,CAAC,SAAS,KAAK,UAAU,CAAC,SAAS;oDAChD,OAAO,IAAI,CAAC;gDAEhB,IAAI,KAAI,CAAC,UAAU,CAAC,MAAM,CAAC,6BAA6B,EAAE,IAAI,aAAa,CAAC,UAAU,KAAK,UAAU,CAAC,UAAU;oDAC5G,OAAO,IAAI,CAAC;gDAEhB,IAAI,aAAa,CAAC,OAAO,CAAC,MAAM,KAAK,UAAU,CAAC,WAAW,CAAC,MAAM;oDAC9D,OAAO,IAAI,CAAC;gDAEhB,OAAO,CAAC,aAAa,CAAC,OAAO,CAAC,KAAK,CAAC,UAAA,MAAM,IAAI,OAAA,UAAU,CAAC,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,EAA1D,CAA0D,CAAC,CAAC;6CAC7G;4CAED,OAAO,IAAI,CAAC;wCAChB,CAAC,CAAC;6CACD,GAAG,CAAC,UAAM,UAAU;;;;wDACjB,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,cAAc,CAAC,0BAAuB,UAAU,CAAC,IAAI,sBAAgB,KAAK,CAAC,IAAM,CAAC,CAAC;wDAC1G,qBAAM,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,KAAK,EAAE,UAAU,CAAC,EAAA;;wDAAnD,SAAmD,CAAC;;;;6CACvD,CAAC,CAAC;wCAEP,qBAAM,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,EAAA;;wCAA9B,SAA8B,CAAC;;;;;;;;;wBAlCZ,KAAA,sBAAA,IAAI,CAAC,qBAAqB,CAAA;;;;wBAAtC,QAAQ;sDAAR,QAAQ;;;;;;;;;;;;;;;;;;;;;;KAoCtB;IAEe,0CAAa,GAA7B;;;;;;;;wBACI,2CAA2C;wBAC3C,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,YAAY,yBAAW,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,YAAY,yCAAmB;4BACtG,sBAAO;4CAEA,QAAQ;;;;;wCACT,KAAK,GAAG,OAAK,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,YAAY,CAAC,KAAK,CAAC,KAAK,KAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,EAAxD,CAAwD,CAAC,CAAC;wCACpH,IAAI,CAAC,KAAK;8EACG;wCAEP,SAAS,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,UAAA,UAAU;4CAC5C,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,UAAA,aAAa,IAAI,OAAA,aAAa,CAAC,IAAI,KAAK,UAAU,CAAC,IAAI,EAAtC,CAAsC,CAAC,CAAC;wCAC1F,CAAC,CAAC,CAAC;wCAEH,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC;8EACb;wCAEb,OAAK,UAAU,CAAC,MAAM,CAAC,cAAc,CAAC,oCAAkC,SAAS,CAAC,GAAG,CAAC,UAAA,KAAK,IAAI,OAAA,OAAI,KAAK,CAAC,IAAI,OAAG,EAAjB,CAAiB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,sBAAgB,KAAK,CAAC,IAAI,OAAG,CAAC,CAAC;wCAC3J,qBAAM,OAAK,WAAW,CAAC,oBAAoB,CAAC,KAAK,EAAE,SAAS,CAAC,EAAA;;wCAA7D,SAA6D,CAAC;;;;;;;;;wBAb3C,KAAA,sBAAA,IAAI,CAAC,qBAAqB,CAAA;;;;wBAAtC,QAAQ;sDAAR,QAAQ;;;;;;;;;;;;;;;;;;;;;;KAetB;IAEe,2DAA8B,GAA9C;;;;;;;;4CACe,QAAQ;;;;;wCACT,KAAK,GAAG,OAAK,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,YAAY,CAAC,KAAK,CAAC,KAAK,KAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,EAAxD,CAAwD,CAAC,CAAC;wCACpH,IAAI,CAAC,KAAK;8EACG;wCAEP,gBAAgB,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,UAAA,WAAW;4CACrD,OAAO,WAAW,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,cAAc,IAAI,OAAA,cAAc,CAAC,IAAI,KAAK,WAAW,CAAC,IAAI,EAAxC,CAAwC,CAAC,CAAC;wCACpI,CAAC,CAAC,CAAC;wCAEH,IAAI,gBAAgB,CAAC,MAAM,KAAK,CAAC;8EACpB;wCAEb,OAAK,UAAU,CAAC,MAAM,CAAC,cAAc,CAAC,qCAAmC,gBAAgB,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,OAAI,MAAM,CAAC,IAAI,OAAG,EAAlB,CAAkB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,sBAAgB,KAAK,CAAC,IAAI,OAAG,CAAC,CAAC;wCACrK,qBAAM,OAAK,WAAW,CAAC,qBAAqB,CAAC,KAAK,EAAE,gBAAgB,CAAC,EAAA;;wCAArE,SAAqE,CAAC;;;;;;;;;wBAbnD,KAAA,sBAAA,IAAI,CAAC,qBAAqB,CAAA;;;;wBAAtC,QAAQ;sDAAR,QAAQ;;;;;;;;;;;;;;;;;;;;;;KAetB;IAEe,8CAAiB,GAAjC;;;;;;;;wBACI,iDAAiD;wBACjD,IAAI,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,YAAY,+BAAc,CAAC;4BACnD,sBAAO;4CAEA,QAAQ;;;;;wCACT,KAAK,GAAG,OAAK,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,YAAY,CAAC,KAAK,CAAC,KAAK,KAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,EAAxD,CAAwD,CAAC,CAAC;wCACpH,IAAI,CAAC,KAAK;8EACG;wCAEP,aAAa,GAAG,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,UAAA,cAAc;4CACxD,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,UAAA,iBAAiB,IAAI,OAAA,iBAAiB,CAAC,IAAI,KAAK,cAAc,CAAC,IAAI,EAA9C,CAA8C,CAAC,CAAC;wCAC1G,CAAC,CAAC,CAAC;wCAEH,IAAI,aAAa,CAAC,MAAM,KAAK,CAAC;8EACjB;wCAEb,OAAK,UAAU,CAAC,MAAM,CAAC,cAAc,CAAC,wCAAsC,aAAa,CAAC,GAAG,CAAC,UAAA,SAAS,IAAI,OAAA,OAAI,SAAS,CAAC,IAAI,OAAG,EAArB,CAAqB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,sBAAgB,KAAK,CAAC,IAAI,OAAG,CAAC,CAAC;wCAC3K,qBAAM,OAAK,WAAW,CAAC,wBAAwB,CAAC,KAAK,EAAE,aAAa,CAAC,EAAA;;wCAArE,SAAqE,CAAC;;;;;;;;;wBAbnD,KAAA,sBAAA,IAAI,CAAC,qBAAqB,CAAA;;;;wBAAtC,QAAQ;sDAAR,QAAQ;;;;;;;;;;;;;;;;;;;;;;KAetB;IAED;;;;OAIG;IACa,4CAAe,GAA/B;;;;;;;;4CACe,QAAQ;;;;;wCAET,UAAU,GAAG,OAAK,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,YAAY,CAAC,KAAK,CAAC,KAAK,KAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,EAAxD,CAAwD,CAAC,CAAC;wCACzH,IAAI,UAAU;8EACD;wCAEb,OAAK,UAAU,CAAC,MAAM,CAAC,cAAc,CAAC,2BAAyB,OAAK,YAAY,CAAC,QAAQ,CAAG,CAAC,CAAC;wCAGxF,KAAK,GAAG,aAAK,CAAC,MAAM,CAAC,QAAQ,EAAE,OAAK,UAAU,CAAC,MAAM,CAAC,CAAC;wCAC7D,qBAAM,OAAK,WAAW,CAAC,WAAW,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,EAAA;;wCAAvD,SAAuD,CAAC;wCACxD,OAAK,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;;;;;;;;;wBAXvB,KAAA,sBAAA,IAAI,CAAC,qBAAqB,CAAA;;;;wBAAtC,QAAQ;sDAAR,QAAQ;;;;;;;;;;;;;;;;;;;;;;KAatB;IAEe,wCAAW,GAA3B;;;;;;;;4CACe,QAAQ;;;;;wCAET,SAAS,GAAG,OAAK,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,UAAA,IAAI;4CACpD,IAAM,cAAc,GAAG,OAAO,IAAI,CAAC,UAAU,KAAK,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,KAAI,CAAC,UAAU,CAAC,CAAC,QAAQ,EAAE,CAAC;4CAClI,IAAM,kBAAkB,GAAG,OAAO,QAAQ,CAAC,UAAU,KAAK,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,UAAW,CAAC,KAAI,CAAC,UAAU,CAAC,CAAC,QAAQ,EAAE,CAAC;4CACnJ,OAAO,KAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,KAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,cAAc,KAAK,kBAAkB,CAAC;wCAC5G,CAAC,CAAC,CAAC;wCACH,IAAI,SAAS;8EACA;wCAEb,OAAK,UAAU,CAAC,MAAM,CAAC,cAAc,CAAC,0BAAwB,OAAK,YAAY,CAAC,QAAQ,CAAG,CAAC,CAAC;wCAGvF,IAAI,GAAG,WAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,OAAK,UAAU,CAAC,MAAM,CAAC,CAAC;wCAC3D,qBAAM,OAAK,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,EAAA;;wCAAvC,SAAuC,CAAC;wCACxC,OAAK,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;;;;;;;;;wBAfrB,KAAA,sBAAA,IAAI,CAAC,yBAAyB,CAAA;;;;wBAA1C,QAAQ;sDAAR,QAAQ;;;;;;;;;;;;;;;;;;;;;;KAiBtB;IAEe,yCAAY,GAA5B;;;;;;;;wBACU,YAAY,GAAgB,EAAE,CAAC;wBAC/B,yBAAyB,GAAG,IAAI,CAAC,yBAAyB,CAAC;wBAE3D,cAAc,GAAG,IAAI,GAAG,EAAwB,CAAC;4CAC5C,IAAI;4BACX,IAAM,YAAY,GAAG,yBAAyB,CAAC,IAAI,CAAC,UAAA,QAAQ;gCACxD,OAAO,KAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,KAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;4BACnE,CAAC,CAAC,CAAC;4BACH,IAAG,YAAY,EAAC;gCACZ,cAAc,CAAC,GAAG,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;6BAC1C;;;4BANL,KAAmB,KAAA,sBAAA,IAAI,CAAC,WAAW,CAAC,WAAW,CAAA;gCAApC,IAAI;wCAAJ,IAAI;6BAOd;;;;;;;;;;4BACD,4CAA4C;4BAC5C,KAAmB,KAAA,sBAAA,IAAI,CAAC,WAAW,CAAC,WAAW,CAAA,4CAAE;gCAAtC,IAAI;gCACL,YAAY,GAAG,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gCAC9C,IAAG,CAAC,YAAY,EAAC;oCACb,SAAS;iCACZ;gCACK,cAAc,GAAG,OAAO,IAAI,CAAC,UAAU,KAAK,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,QAAQ,EAAE,CAAC;gCAC5H,kBAAkB,GAAG,OAAO,YAAY,CAAC,UAAU,KAAK,QAAQ,CAAC,CAAC,CAAC,YAAY,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC,UAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,QAAQ,EAAE,CAAC;gCAE/J,IAAI,cAAc,KAAK,kBAAkB;oCACrC,SAAS;gCAEb,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,cAAc,CAAC,2BAAyB,IAAI,CAAC,IAAM,CAAC,CAAC;gCAE5E,6BAA6B;gCAC7B,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;6BAC3B;;;;;;;;;wBAGK,mBAAmB,GAAG,UAAC,IAAU;;4BACnC,wBAAwB;4BACxB,IAAM,YAAY,GAAG,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;4BAC9C,IAAI,oBAAoB,GAAG,CAAC,IAAI,CAAC,CAAC;4BAClC,sEAAsE;4BACtE,IAAG,CAAC,YAAY,EAAC;gCACb,OAAO,oBAAoB,CAAC;6BAC/B;;gCACD,+BAA+B;gCAC/B,KAA4C,IAAA,KAAA,sBAAA,cAAc,CAAC,OAAO,EAAE,CAAA,gBAAA,4BAAC;oCAA3D,IAAA,KAAA,gCAA8B,EAA7B,WAAW,QAAA,EAAE,eAAe,QAAA;oCACnC,wBAAwB;oCACxB,IAAG,WAAW,KAAK,IAAI,EAAE;wCACrB,SAAS;qCACZ;oCACD,+DAA+D;oCAC/D,IAAG,eAAe,CAAC,SAAS,IAAI,CAC5B,eAAe,CAAC,SAAS,CAAC,GAAG,CAAC,YAAY,CAAC,MAAM,CAAC;wCAClD,eAAe,CAAC,SAAS,CAAC,GAAG,CAAC,YAAY,CAAC,IAAI,CAAC,CACnD,EAAC;wCACE,4DAA4D;wCAC5D,oBAAoB,GAAG,oBAAoB,CAAC,MAAM,CAAC,mBAAmB,CAAC,WAAW,CAAC,CAAC,CAAC;qCACxF;iCACJ;;;;;;;;;4BACD,6BAA6B;4BAC7B,OAAO,oBAAoB,CAAC;wBAChC,CAAC,CAAC;wBAGI,4BAA4B,GAAc,IAAI,GAAG;wBACnD,oDAAoD;wBACpD,YAAY,CAAC,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,mBAAmB,CAAC,IAAI,CAAC,EAAzB,CAAyB,CAAC;4BACnD,4EAA4E;6BAC3E,MAAM,CAAC,UAAC,GAAG,EAAE,OAAO;4BACjB,OAAO,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;wBAC/B,CAAC,EAAE,EAAE,CAAC;4BACN,iDAAiD;6BAChD,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC;4BACP,OAAO,qBAAS,CAAC,eAAe,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;wBACnF,CAAC,CAAC;4BACF,kCAAkC;6BACjC,OAAO,EAAE,CACb,CAAC;;;;wBAGgB,iCAAA,sBAAA,4BAA4B,CAAA;;;;wBAApC,IAAI;wBACV,qBAAM,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAA;;wBAArC,SAAqC,CAAC;;;;;;;;;;;;;;;;;wBAE1C,IAAI,CAAC,WAAW,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,CAAC,4BAA4B,CAAC,GAAG,CAAC,IAAI,CAAC,EAAvC,CAAuC,CAAC,CAAC;;;;;KACvH;IAED;;;OAGG;IACa,+CAAkB,GAAlC;;;;;;;;6CACe,QAAQ;;;;;wCACT,KAAK,GAAG,OAAK,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,YAAY,CAAC,KAAK,CAAC,KAAK,KAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,EAAxD,CAAwD,CAAC,CAAC;wCACpH,IAAI,CAAC,KAAK;8EACG;wCAGP,mBAAmB,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,UAAA,WAAW;4CACxD,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,cAAc,IAAI,OAAA,cAAc,CAAC,YAAY,KAAK,WAAW,CAAC,IAAI,EAAhD,CAAgD,CAAC,CAAC;wCACtG,CAAC,CAAC,CAAC;wCACH,IAAI,mBAAmB,CAAC,MAAM,KAAK,CAAC;8EACvB;wCAEb,OAAK,UAAU,CAAC,MAAM,CAAC,cAAc,CAAC,wBAAsB,KAAK,CAAC,IAAI,OAAI,GAAG,mBAAmB,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,IAAI,EAAX,CAAW,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;wCAExI,iCAAiC;wCACjC,qBAAM,OAAK,WAAW,CAAC,WAAW,CAAC,KAAK,EAAE,mBAAmB,CAAC,EAAA;;wCAD9D,iCAAiC;wCACjC,SAA8D,CAAC;;;;;;;;;wBAf5C,KAAA,sBAAA,IAAI,CAAC,qBAAqB,CAAA;;;;wBAAtC,QAAQ;uDAAR,QAAQ;;;;;;;;;;;;;;;;;;;;;;KAiBtB;IAED;;;OAGG;IACa,0CAAa,GAA7B;;;;;;;;6CACe,QAAQ;;;;;wCACT,KAAK,GAAG,QAAK,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,YAAY,CAAC,KAAK,CAAC,KAAK,KAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,EAAxD,CAAwD,CAAC,CAAC;wCACpH,IAAI,CAAC,KAAK;8EACG;wCAGP,kBAAkB,GAAG,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,UAAA,cAAc;4CAC7D,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,WAAW,IAAI,OAAA,WAAW,CAAC,IAAI,KAAK,cAAc,CAAC,YAAY,EAAhD,CAAgD,CAAC,CAAC;wCAChG,CAAC,CAAC,CAAC;wCACH,IAAI,kBAAkB,CAAC,MAAM,KAAK,CAAC;8EACtB;wCAGP,qBAAqB,GAAG,QAAK,mCAAmC,CAAC,kBAAkB,CAAC,CAAC;wCACrF,eAAe,GAAG,qBAAqB,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,IAAI,yBAAW,CAAC,MAAM,CAAC,EAAvB,CAAuB,CAAC,CAAC;wCAErF,IAAI,eAAe,CAAC,MAAM,KAAK,CAAC;8EACnB;wCAEb,QAAK,UAAU,CAAC,MAAM,CAAC,cAAc,CAAC,qBAAqB,GAAG,kBAAkB,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,YAAY,EAAnB,CAAmB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;wCAChI,qBAAM,QAAK,WAAW,CAAC,UAAU,CAAC,KAAK,EAAE,eAAe,CAAC,EAAA;;wCAAzD,SAAyD,CAAC;;;;;;;;;wBApBvC,KAAA,sBAAA,IAAI,CAAC,qBAAqB,CAAA;;;;wBAAtC,QAAQ;uDAAR,QAAQ;;;;;;;;;;;;;;;;;;;;;;KAsBtB;IAED;;OAEG;IACa,8CAAiB,GAAjC;;;;;;;;6CACe,QAAQ;;;;;wCACT,KAAK,GAAG,QAAK,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,YAAY,CAAC,KAAK,CAAC,KAAK,KAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,EAAxD,CAAwD,CAAC,CAAC;wCACpH,IAAI,CAAC,KAAK;8EACG;wCAEP,sBAAsB,GAAG,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,SAAS,EAAhB,CAAgB,CAAC,CAAC;wCAC7E,mBAAmB,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,SAAS,EAAhB,CAAgB,CAAC,CAAC;6CACzE,CAAA,mBAAmB,CAAC,MAAM,KAAK,sBAAsB,CAAC,MAAM,IAAI,sBAAsB,CAAC,MAAM,GAAG,CAAC,CAAA,EAAjG,wBAAiG;wCAC3F,qBAAqB,GAAG,sBAAsB,CAAC,GAAG,CAAC,UAAA,qBAAqB;4CAC1E,OAAO,IAAI,yBAAW,CAAC,uBAAU,CAAC,wBAAwB,CAAC,qBAAqB,EAAE,KAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC;wCAC/G,CAAC,CAAC,CAAC;wCACH,qBAAM,QAAK,WAAW,CAAC,iBAAiB,CAAC,KAAK,EAAE,qBAAqB,CAAC,EAAA;;wCAAtE,SAAsE,CAAC;;;;;;;;;;wBAXxD,KAAA,sBAAA,IAAI,CAAC,qBAAqB,CAAA;;;;wBAAtC,QAAQ;uDAAR,QAAQ;;;;;;;;;;;;;;;;;;;;;;KActB;IAED;;;OAGG;IACa,+CAAkB,GAAlC;;;;;;;;6CACe,QAAQ;;;;;;wCACT,KAAK,GAAG,QAAK,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,YAAY,CAAC,KAAK,CAAC,KAAK,KAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,EAAxD,CAAwD,CAAC,CAAC;wCACpH,IAAI,CAAC,KAAK;8EACG;wCAEP,cAAc,GAAG,QAAK,UAAU,CAAC,MAAM,CAAC,kBAAkB,CAAC,KAAK,CAAC,OAAO,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC;wCAClG,IAAI,cAAc,CAAC,MAAM,KAAK,CAAC;8EAClB;;;;wCAGe,mCAAA,sBAAA,cAAc,CAAA,CAAA;;;;wCAA/B,aAAa;wCACpB,qBAAM,QAAK,+BAA+B,CAAC,QAAK,YAAY,CAAC,QAAQ,CAAC,EAAE,aAAa,CAAC,YAAY,CAAC,EAAA;;wCAAnG,SAAmG,CAAC;;;;;;;;;;;;;;;;;;wCAI5E,mCAAA,sBAAA,cAAc,CAAA,CAAA;;;;wCAA/B,aAAa;wCACpB,qBAAM,QAAK,0BAA0B,CAAC,QAAK,YAAY,CAAC,QAAQ,CAAC,EAAE,aAAa,CAAC,YAAY,CAAC,EAAA;;wCAA9F,SAA8F,CAAC;;;;;;;;;;;;;;;;;6CAK/F,CAAC,CAAC,QAAK,UAAU,CAAC,MAAM,YAAY,yBAAW,IAAI,QAAK,UAAU,CAAC,MAAM,YAAY,yCAAmB,CAAC,EAAzG,yBAAyG;;;;wCAC7E,mCAAA,sBAAA,cAAc,CAAA,CAAA;;;;wCAA/B,aAAa;wCACpB,qBAAM,QAAK,0BAA0B,CAAC,QAAK,YAAY,CAAC,QAAQ,CAAC,EAAE,aAAa,CAAC,YAAY,CAAC,EAAA;;wCAA9F,SAA8F,CAAC;;;;;;;;;;;;;;;;;wCAKjG,qBAAqB,GAAG,cAAc,CAAC,GAAG,CAAC,UAAA,aAAa;4CAC1D,IAAM,cAAc,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,IAAI,KAAK,aAAa,CAAC,YAAY,EAA1C,CAA0C,CAAE,CAAC;4CACjG,IAAM,qBAAqB,GAAG,uBAAU,CAAC,wBAAwB,CAAC,aAAa,EAAE,KAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;4CACzG,IAAM,cAAc,GAAG,IAAI,yBAAW,CAAC,qBAAqB,CAAC,CAAC;4CAE9D,OAAO;gDACH,SAAS,EAAE,cAAc;gDACzB,SAAS,EAAE,cAAc;6CAC5B,CAAC;wCACN,CAAC,CAAC,CAAC;wCAEH,IAAI,qBAAqB,CAAC,MAAM,KAAK,CAAC;8EACzB;wCAEb,QAAK,UAAU,CAAC,MAAM,CAAC,cAAc,CAAC,0BAAuB,KAAK,CAAC,IAAI,mBAAe,GAAG,cAAc,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,YAAY,EAAnB,CAAmB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;wCACvJ,qBAAM,QAAK,WAAW,CAAC,aAAa,CAAC,KAAK,EAAE,qBAAqB,CAAC,EAAA;;wCAAlE,SAAkE,CAAC;;;;;;;;;wBA3ChD,KAAA,sBAAA,IAAI,CAAC,qBAAqB,CAAA;;;;wBAAtC,QAAQ;uDAAR,QAAQ;;;;;;;;;;;;;;;;;;;;;;KA6CtB;IAED;;OAEG;IACa,6CAAgB,GAAhC;;;;;;;;6CACe,QAAQ;;;;;wCACT,KAAK,GAAG,QAAK,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,YAAY,CAAC,KAAK,CAAC,KAAK,KAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,EAAxD,CAAwD,CAAC,CAAC;wCACpH,IAAI,CAAC,KAAK;8EACG;wCAEP,UAAU,GAAG,QAAQ,CAAC,OAAO;6CAC9B,MAAM,CAAC,UAAA,aAAa,IAAI,OAAA,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,IAAI,KAAK,aAAa,CAAC,IAAI,EAAtC,CAAsC,CAAC,IAAI,aAAa,CAAC,WAAW,KAAK,IAAI,EAA/G,CAA+G,CAAC;6CACxI,GAAG,CAAC,UAAA,aAAa,IAAI,OAAA,uBAAU,CAAC,MAAM,CAAC,aAAa,CAAC,EAAhC,CAAgC,CAAC,CAAC;wCAE5D,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC;8EACd;wCAEb,QAAK,UAAU,CAAC,MAAM,CAAC,cAAc,CAAC,wBAAsB,UAAU,CAAC,GAAG,CAAC,UAAA,KAAK,IAAI,OAAA,OAAI,KAAK,CAAC,IAAI,OAAG,EAAjB,CAAiB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,oBAAc,KAAK,CAAC,IAAI,OAAG,CAAC,CAAC;wCAC9I,qBAAM,QAAK,WAAW,CAAC,aAAa,CAAC,KAAK,EAAE,UAAU,CAAC,EAAA;;wCAAvD,SAAuD,CAAC;;;;;;;;;wBAbrC,KAAA,sBAAA,IAAI,CAAC,qBAAqB,CAAA;;;;wBAAtC,QAAQ;uDAAR,QAAQ;;;;;;;;;;;;;;;;;;;;;;KAetB;IAEe,4CAAe,GAA/B;;;;;;;;wBACI,2CAA2C;wBAC3C,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,YAAY,yBAAW,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,YAAY,yCAAmB;4BACtG,sBAAO;6CAEA,QAAQ;;;;;wCACT,KAAK,GAAG,QAAK,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,YAAY,CAAC,KAAK,CAAC,KAAK,KAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,EAAxD,CAAwD,CAAC,CAAC;wCACpH,IAAI,CAAC,KAAK;8EACG;wCAEP,SAAS,GAAG,QAAQ,CAAC,MAAM;6CAC5B,MAAM,CAAC,UAAA,aAAa,IAAI,OAAA,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,IAAI,KAAK,aAAa,CAAC,IAAI,EAAtC,CAAsC,CAAC,EAAxE,CAAwE,CAAC;6CACjG,GAAG,CAAC,UAAA,aAAa,IAAI,OAAA,uBAAU,CAAC,MAAM,CAAC,aAAa,CAAC,EAAhC,CAAgC,CAAC,CAAC;wCAE5D,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC;8EACb;wCAEb,QAAK,UAAU,CAAC,MAAM,CAAC,cAAc,CAAC,mCAAiC,SAAS,CAAC,GAAG,CAAC,UAAA,KAAK,IAAI,OAAA,OAAI,KAAK,CAAC,IAAI,OAAG,EAAjB,CAAiB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,oBAAc,KAAK,CAAC,IAAI,OAAG,CAAC,CAAC;wCACxJ,qBAAM,QAAK,WAAW,CAAC,sBAAsB,CAAC,KAAK,EAAE,SAAS,CAAC,EAAA;;wCAA/D,SAA+D,CAAC;;;;;;;;;wBAb7C,KAAA,sBAAA,IAAI,CAAC,qBAAqB,CAAA;;;;wBAAtC,QAAQ;uDAAR,QAAQ;;;;;;;;;;;;;;;;;;;;;;KAetB;IAED;;OAEG;IACa,6DAAgC,GAAhD;;;;;;;;6CACe,QAAQ;;;;;wCACT,KAAK,GAAG,QAAK,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,YAAY,CAAC,KAAK,CAAC,KAAK,KAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,EAAxD,CAAwD,CAAC,CAAC;wCACpH,IAAI,CAAC,KAAK;8EACG;wCAEP,gBAAgB,GAAG,QAAQ,CAAC,OAAO;6CACpC,MAAM,CAAC,UAAA,cAAc,IAAI,OAAA,cAAc,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,WAAW,IAAI,OAAA,WAAW,CAAC,IAAI,KAAK,cAAc,CAAC,IAAI,EAAxC,CAAwC,CAAC,EAAjH,CAAiH,CAAC;6CAC3I,GAAG,CAAC,UAAA,cAAc,IAAI,OAAA,yBAAW,CAAC,MAAM,CAAC,cAAc,CAAC,EAAlC,CAAkC,CAAC,CAAC;wCAE/D,IAAI,gBAAgB,CAAC,MAAM,KAAK,CAAC;8EACpB;wCAEb,QAAK,UAAU,CAAC,MAAM,CAAC,cAAc,CAAC,oCAAkC,gBAAgB,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,OAAI,MAAM,CAAC,IAAI,OAAG,EAAlB,CAAkB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,oBAAc,KAAK,CAAC,IAAI,OAAG,CAAC,CAAC;wCAClK,qBAAM,QAAK,WAAW,CAAC,uBAAuB,CAAC,KAAK,EAAE,gBAAgB,CAAC,EAAA;;wCAAvE,SAAuE,CAAC;;;;;;;;;wBAbrD,KAAA,sBAAA,IAAI,CAAC,qBAAqB,CAAA;;;;wBAAtC,QAAQ;uDAAR,QAAQ;;;;;;;;;;;;;;;;;;;;;;KAetB;IAED;;OAEG;IACa,gDAAmB,GAAnC;;;;;;;;wBACI,iDAAiD;wBACjD,IAAI,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,YAAY,+BAAc,CAAC;4BACnD,sBAAO;6CAEA,QAAQ;;;;;wCACT,KAAK,GAAG,QAAK,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,YAAY,CAAC,KAAK,CAAC,KAAK,KAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,EAAxD,CAAwD,CAAC,CAAC;wCACpH,IAAI,CAAC,KAAK;8EACG;wCAEP,aAAa,GAAG,QAAQ,CAAC,UAAU;6CACxC,MAAM,CAAC,UAAA,iBAAiB,IAAI,OAAA,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,UAAA,cAAc,IAAI,OAAA,cAAc,CAAC,IAAI,KAAK,iBAAiB,CAAC,IAAI,EAA9C,CAA8C,CAAC,EAAxF,CAAwF,CAAC;6CACrH,GAAG,CAAC,UAAA,iBAAiB,IAAI,OAAA,+BAAc,CAAC,MAAM,CAAC,iBAAiB,CAAC,EAAxC,CAAwC,CAAC,CAAC;wCAEpE,IAAI,aAAa,CAAC,MAAM,KAAK,CAAC;8EACjB;wCAEb,QAAK,UAAU,CAAC,MAAM,CAAC,cAAc,CAAC,uCAAqC,aAAa,CAAC,GAAG,CAAC,UAAA,SAAS,IAAI,OAAA,OAAI,SAAS,CAAC,IAAI,OAAG,EAArB,CAAqB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,oBAAc,KAAK,CAAC,IAAI,OAAG,CAAC,CAAC;wCACxK,qBAAM,QAAK,WAAW,CAAC,0BAA0B,CAAC,KAAK,EAAE,aAAa,CAAC,EAAA;;wCAAvE,SAAuE,CAAC;;;;;;;;;wBAbrD,KAAA,sBAAA,IAAI,CAAC,qBAAqB,CAAA;;;;wBAAtC,QAAQ;uDAAR,QAAQ;;;;;;;;;;;;;;;;;;;;;;KAetB;IAED;;OAEG;IACa,8CAAiB,GAAjC;;;;;;;;6CACe,QAAQ;;;;;wCACT,KAAK,GAAG,QAAK,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,YAAY,CAAC,KAAK,CAAC,KAAK,KAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,EAAxD,CAAwD,CAAC,CAAC;wCACpH,IAAI,CAAC,KAAK;8EACG;wCAEP,OAAO,GAAG,QAAQ,CAAC,WAAW;6CAC/B,MAAM,CAAC,UAAA,UAAU;4CAClB,OAAO,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,UAAA,YAAY,IAAI,OAAA,CAC3C,CAAC,YAAY,CAAC,IAAI,KAAK,UAAU,CAAC,IAAI,CAAC;gDACvC,CAAC,KAAI,CAAC,YAAY,CAAC,YAAY,CAAC,KAAK,KAAI,CAAC,YAAY,CAAC,UAAU,CAAC,wBAAwB,CAAC,CAAC,CAC/F,EAH8C,CAG9C,CAAC,CAAC;wCACP,CAAC,CAAC,CAAC;wCACH,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC;8EACX;wCAEP,aAAa,GAAG,OAAO,CAAC,GAAG,CAAC,UAAA,kBAAkB,IAAI,OAAA,iCAAe,CAAC,MAAM,CAAC,kBAAkB,EAAE,KAAI,CAAC,UAAU,CAAC,MAAM,CAAC,EAAlE,CAAkE,CAAC,CAAC;wCAC5H,QAAK,UAAU,CAAC,MAAM,CAAC,cAAc,CAAC,8BAA4B,OAAO,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,IAAI,EAAR,CAAQ,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,oBAAc,KAAK,CAAC,IAAI,OAAG,CAAC,CAAC;wCACtI,qBAAM,QAAK,WAAW,CAAC,iBAAiB,CAAC,KAAK,EAAE,aAAa,CAAC,EAAA;;wCAA9D,SAA8D,CAAC;;;;;;;;;wBAjB5C,KAAA,sBAAA,IAAI,CAAC,qBAAqB,CAAA;;;;wBAAtC,QAAQ;uDAAR,QAAQ;;;;;;;;;;;;;;;;;;;;;;KAmBtB;IAED;;OAEG;IACa,4DAA+B,GAA/C,UAAgD,SAAiB,EAAE,UAAkB;;;;;;;;wBAC3E,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,YAAY,CAAC,KAAK,CAAC,KAAK,SAAS,EAAtC,CAAsC,CAAC,CAAC;wBAClG,IAAI,CAAC,KAAK;4BACN,sBAAO;wBAEL,YAAY,GAAY,EAAE,CAAC;wBAC3B,gBAAgB,GAAG,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,EAAjD,CAAiD,CAAC,CAAC;wBACjH,IAAI,gBAAgB,EAAE;4BACZ,WAAW,GAAG,KAAK,CAAC,KAAK,EAAE,CAAC;4BAClC,WAAW,CAAC,WAAW,GAAG,CAAC,gBAAgB,CAAC,CAAC;4BAC7C,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;4BAC/B,KAAK,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,CAAC;yBAC5C;6CAEU,WAAW;4BAClB,IAAM,iBAAiB,GAAG,WAAW,CAAC,WAAW,CAAC,MAAM,CAAC,UAAA,UAAU;gCAC/D,OAAO,KAAI,CAAC,YAAY,CAAC,UAAU,CAAC,KAAK,SAAS,IAAI,UAAU,CAAC,qBAAqB,CAAC,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;4BACtH,CAAC,CAAC,CAAC;4BAEH,IAAI,iBAAiB,CAAC,MAAM,GAAG,CAAC,EAAE;gCAC9B,IAAM,WAAW,GAAG,WAAW,CAAC,KAAK,EAAE,CAAC;gCACxC,WAAW,CAAC,WAAW,GAAG,iBAAiB,CAAC;gCAC5C,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;gCAC/B,iBAAiB,CAAC,OAAO,CAAC,UAAA,gBAAgB,IAAI,OAAA,WAAW,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,EAA9C,CAA8C,CAAC,CAAC;6BACjG;;;4BAVL,KAA0B,KAAA,sBAAA,IAAI,CAAC,WAAW,CAAC,YAAY,CAAA;gCAA5C,WAAW;yCAAX,WAAW;6BAWrB;;;;;;;;;6BAEG,CAAA,YAAY,CAAC,MAAM,GAAG,CAAC,CAAA,EAAvB,wBAAuB;;;;wBACG,iBAAA,sBAAA,YAAY,CAAA;;;;wBAA3B,WAAW;wBAClB,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,cAAc,CAAC,sCAAoC,WAAW,CAAC,IAAI,UAAK,WAAW,CAAC,WAAW,CAAC,GAAG,CAAC,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,IAAI,EAAf,CAAe,CAAC,CAAC,IAAI,CAAC,IAAI,CAAG,CAAC,CAAC;wBACxK,qBAAM,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC,WAAW,EAAE,WAAW,CAAC,WAAW,CAAC,EAAA;;wBAA5E,SAA4E,CAAC;;;;;;;;;;;;;;;;;;;;KAGxF;IAED;;OAEG;IACa,uDAA0B,GAA1C,UAA2C,SAAiB,EAAE,UAAkB;;;;;;;wBACtE,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,YAAY,CAAC,KAAK,CAAC,KAAK,SAAS,EAAtC,CAAsC,CAAC,CAAC;wBAClG,IAAI,CAAC,KAAK;4BACN,sBAAO;wBAEL,cAAc,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,IAAI,KAAK,CAAC,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,EAA5E,CAA4E,CAAC,CAAC;wBACnI,IAAI,cAAc,CAAC,MAAM,KAAK,CAAC;4BAC3B,sBAAO;wBAEX,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,cAAc,CAAC,mCAAgC,SAAS,aAAM,UAAU,YAAM,cAAc,CAAC,GAAG,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,IAAI,EAAV,CAAU,CAAC,CAAC,IAAI,CAAC,IAAI,CAAG,CAAC,CAAC;wBAC3J,qBAAM,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,KAAK,EAAE,cAAc,CAAC,EAAA;;wBAAzD,SAAyD,CAAC;;;;;KAC7D;IAED;;OAEG;IACa,uDAA0B,GAA1C,UAA2C,SAAiB,EAAE,UAAkB;;;;;;;wBACtE,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,YAAY,CAAC,KAAK,CAAC,KAAK,SAAS,EAAtC,CAAsC,CAAC,CAAC;wBAClG,IAAI,CAAC,KAAK;4BACN,sBAAO;wBAEL,cAAc,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,IAAI,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,EAA9E,CAA8E,CAAC,CAAC;wBACtI,IAAI,cAAc,CAAC,MAAM,KAAK,CAAC;4BAC3B,sBAAO;wBAEX,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,cAAc,CAAC,8CAA2C,SAAS,aAAM,UAAU,YAAM,cAAc,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,IAAI,EAAX,CAAW,CAAC,CAAC,IAAI,CAAC,IAAI,CAAG,CAAC,CAAC;wBACxK,qBAAM,IAAI,CAAC,WAAW,CAAC,qBAAqB,CAAC,KAAK,EAAE,cAAc,CAAC,EAAA;;wBAAnE,SAAmE,CAAC;;;;;KACvE;IAED;;OAEG;IACO,gEAAmC,GAA7C,UAA8C,OAAyB;QAAvE,iBAEC;QADG,OAAO,OAAO,CAAC,GAAG,CAAC,UAAA,cAAc,IAAI,OAAA,uBAAU,CAAC,wBAAwB,CAAC,cAAc,EAAE,KAAI,CAAC,UAAU,CAAC,MAAM,CAAC,EAA3E,CAA2E,CAAC,CAAC;IACtH,CAAC;IAED;;OAEG;IACa,uDAA0B,GAA1C,UAA2C,WAAwB;;;;;;wBACzD,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC;wBAC5B,QAAQ,GAAG,IAAI,CAAC,eAAe,CAAC;wBAChC,oBAAoB,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,cAAc,CAAC,kBAAkB,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;wBAEzG,qBAAM,WAAW,CAAC,WAAW,CAAC,IAAI,aAAK,CACnC;gCACI,QAAQ,EAAE,QAAQ;gCAClB,MAAM,EAAE,MAAM;gCACd,IAAI,EAAE,oBAAoB;gCAC1B,OAAO,EAAE;oCACL;wCACI,IAAI,EAAE,MAAM;wCACZ,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,aAAa,CAAC,EAAC,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,eAAe,CAAC,YAAY,EAAC,CAAC;wCACvG,UAAU,EAAE,KAAK;qCACpB;oCACD;wCACI,IAAI,EAAE,UAAU;wCAChB,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,aAAa,CAAC,EAAC,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,eAAe,CAAC,gBAAgB,EAAC,CAAC;wCAC3G,UAAU,EAAE,IAAI;qCACnB;oCACD;wCACI,IAAI,EAAE,QAAQ;wCACd,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,aAAa,CAAC,EAAC,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,eAAe,CAAC,cAAc,EAAC,CAAC;wCACzG,UAAU,EAAE,IAAI;qCACnB;oCACD;wCACI,IAAI,EAAE,OAAO;wCACb,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,aAAa,CAAC,EAAC,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,eAAe,CAAC,aAAa,EAAC,CAAC;wCACxG,UAAU,EAAE,IAAI;qCACnB;oCACD;wCACI,IAAI,EAAE,MAAM;wCACZ,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,aAAa,CAAC,EAAC,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,eAAe,CAAC,YAAY,EAAC,CAAC;wCACvG,UAAU,EAAE,IAAI;qCACnB;oCACD;wCACI,IAAI,EAAE,OAAO;wCACb,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,aAAa,CAAC,EAAC,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,eAAe,CAAC,aAAa,EAAC,CAAC;wCACxG,UAAU,EAAE,IAAI;qCACnB;iCACJ;6BACJ,CACJ,EAAE,IAAI,CAAC,EAAA;;wBAtCR,SAsCQ,CAAC;;;;;KACZ;IACL,yBAAC;AAAD,CAz0BA,AAy0BC,IAAA;AAz0BY,gDAAkB","file":"RdbmsSchemaBuilder.js","sourcesContent":["import {CockroachDriver} from \"../driver/cockroachdb/CockroachDriver\";\nimport {Table} from \"./table/Table\";\nimport {TableColumn} from \"./table/TableColumn\";\nimport {TableForeignKey} from \"./table/TableForeignKey\";\nimport {TableIndex} from \"./table/TableIndex\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {Connection} from \"../connection/Connection\";\nimport {SchemaBuilder} from \"./SchemaBuilder\";\nimport {SqlInMemory} from \"../driver/SqlInMemory\";\nimport {TableUtils} from \"./util/TableUtils\";\nimport {TableColumnOptions} from \"./options/TableColumnOptions\";\nimport {PostgresDriver} from \"../driver/postgres/PostgresDriver\";\nimport {MysqlDriver} from \"../driver/mysql/MysqlDriver\";\nimport {TableUnique} from \"./table/TableUnique\";\nimport {TableCheck} from \"./table/TableCheck\";\nimport {TableExclusion} from \"./table/TableExclusion\";\nimport {View} from \"./view/View\";\nimport {ViewUtils} from \"./util/ViewUtils\";\nimport {AuroraDataApiDriver} from \"../driver/aurora-data-api/AuroraDataApiDriver\";\n\n/**\n * Creates complete tables schemas in the database based on the entity metadatas.\n *\n * Steps how schema is being built:\n * 1. load list of all tables with complete column and keys information from the db\n * 2. drop all (old) foreign keys that exist in the table, but does not exist in the metadata\n * 3. create new tables that does not exist in the db, but exist in the metadata\n * 4. drop all columns exist (left old) in the db table, but does not exist in the metadata\n * 5. add columns from metadata which does not exist in the table\n * 6. update all exist columns which metadata has changed\n * 7. update primary keys - update old and create new primary key from changed columns\n * 8. create foreign keys which does not exist in the table yet\n * 9. create indices which are missing in db yet, and drops indices which exist in the db, but does not exist in the metadata anymore\n */\nexport class RdbmsSchemaBuilder implements SchemaBuilder {\n    /**\n     * Used to execute schema creation queries in a single connection.\n     */\n    protected queryRunner: QueryRunner;\n\n    private currentDatabase?: string;\n\n    private currentSchema?: string;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected connection: Connection) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates complete schemas for the given entity metadatas.\n     */\n    async build(): Promise<void> {\n        this.queryRunner = this.connection.createQueryRunner();\n\n        // this.connection.driver.database || this.currentDatabase;\n        this.currentDatabase = this.connection.driver.database;\n        this.currentSchema = this.connection.driver.schema;\n\n        // CockroachDB implements asynchronous schema sync operations which can not been executed in transaction.\n        // E.g. if you try to DROP column and ADD it again in the same transaction, crdb throws error.\n        const isUsingTransactions = (\n            !(this.connection.driver instanceof CockroachDriver) &&\n            this.connection.options.migrationsTransactionMode !== \"none\"\n        );\n\n        if (isUsingTransactions) {\n            await this.queryRunner.startTransaction();\n        }\n\n        try {\n            await this.createMetadataTableIfNecessary(this.queryRunner);\n            // Flush the queryrunner table & view cache\n            const tablePaths = this.entityToSyncMetadatas.map(metadata => this.getTablePath(metadata));\n\n            await this.queryRunner.getTables(tablePaths);\n            await this.queryRunner.getViews([]);\n\n            await this.executeSchemaSyncOperationsInProperOrder();\n\n            // if cache is enabled then perform cache-synchronization as well\n            if (this.connection.queryResultCache)\n                await this.connection.queryResultCache.synchronize(this.queryRunner);\n\n            if (isUsingTransactions) {\n                await this.queryRunner.commitTransaction();\n            }\n\n        } catch (error) {\n\n            try { // we throw original error even if rollback thrown an error\n                if (isUsingTransactions) {\n                    await this.queryRunner.rollbackTransaction();\n                }\n            } catch (rollbackError) { }\n            throw error;\n\n        } finally {\n            await this.queryRunner.release();\n        }\n    }\n\n    /**\n     * If the schema contains views, create the typeorm_metadata table if it doesn't exist yet\n     */\n    async createMetadataTableIfNecessary(queryRunner: QueryRunner): Promise<void> {\n        if (this.viewEntityToSyncMetadatas.length > 0 || (this.connection.driver instanceof PostgresDriver && this.connection.driver.isGeneratedColumnsSupported)) {\n            await this.createTypeormMetadataTable(queryRunner);\n        }\n    }\n\n    /**\n     * Returns sql queries to be executed by schema builder.\n     */\n    async log(): Promise<SqlInMemory> {\n        this.queryRunner = this.connection.createQueryRunner();\n        try {\n            // Flush the queryrunner table & view cache\n            const tablePaths = this.entityToSyncMetadatas.map(metadata => this.getTablePath(metadata));\n            await this.queryRunner.getTables(tablePaths);\n            await this.queryRunner.getViews([]);\n\n            this.queryRunner.enableSqlMemory();\n            await this.executeSchemaSyncOperationsInProperOrder();\n\n            // if cache is enabled then perform cache-synchronization as well\n            if (this.connection.queryResultCache) // todo: check this functionality\n                await this.connection.queryResultCache.synchronize(this.queryRunner);\n\n            return this.queryRunner.getMemorySql();\n\n        } finally {\n            // its important to disable this mode despite the fact we are release query builder\n            // because there exist drivers which reuse same query runner. Also its important to disable\n            // sql memory after call of getMemorySql() method because last one flushes sql memory.\n            this.queryRunner.disableSqlMemory();\n            await this.queryRunner.release();\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Returns only entities that should be synced in the database.\n     */\n    protected get entityToSyncMetadatas(): EntityMetadata[] {\n        return this.connection.entityMetadatas.filter(metadata => metadata.synchronize && metadata.tableType !== \"entity-child\" && metadata.tableType !== \"view\");\n    }\n\n    /**\n     * Returns only entities that should be synced in the database.\n     */\n    protected get viewEntityToSyncMetadatas(): EntityMetadata[] {\n        return this.connection.entityMetadatas\n            .filter(metadata => metadata.tableType === \"view\" && metadata.synchronize)\n            // sort views in creation order by dependencies\n            .sort(ViewUtils.viewMetadataCmp);\n    }\n\n    /**\n     * Executes schema sync operations in a proper order.\n     * Order of operations matter here.\n     */\n    protected async executeSchemaSyncOperationsInProperOrder(): Promise<void> {\n        await this.dropOldViews();\n        await this.dropOldForeignKeys();\n        await this.dropOldIndices();\n        await this.dropOldChecks();\n        await this.dropOldExclusions();\n        await this.dropCompositeUniqueConstraints();\n        // await this.renameTables();\n        await this.renameColumns();\n        await this.createNewTables();\n        await this.dropRemovedColumns();\n        await this.addNewColumns();\n        await this.updatePrimaryKeys();\n        await this.updateExistColumns();\n        await this.createNewIndices();\n        await this.createNewChecks();\n        await this.createNewExclusions();\n        await this.createCompositeUniqueConstraints();\n        await this.createForeignKeys();\n        await this.createViews();\n    }\n\n    private getTablePath(target: EntityMetadata | Table | View | TableForeignKey | string): string {\n        const parsed = this.connection.driver.parseTableName(target);\n\n        return this.connection.driver.buildTableName(\n            parsed.tableName,\n            parsed.schema || this.currentSchema,\n            parsed.database || this.currentDatabase\n        );\n    }\n\n    /**\n     * Drops all (old) foreign keys that exist in the tables, but do not exist in the entity metadata.\n     */\n    protected async dropOldForeignKeys(): Promise<void> {\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(table => this.getTablePath(table) === this.getTablePath(metadata));\n            if (!table)\n                continue;\n\n            // find foreign keys that exist in the schemas but does not exist in the entity metadata\n            const tableForeignKeysToDrop = table.foreignKeys.filter(tableForeignKey => {\n                const metadataFK = metadata.foreignKeys.find(metadataForeignKey => (\n                    (tableForeignKey.name === metadataForeignKey.name) &&\n                    (this.getTablePath(tableForeignKey) === this.getTablePath(metadataForeignKey.referencedEntityMetadata))\n                ));\n                return !metadataFK\n                    || (metadataFK.onDelete && metadataFK.onDelete !== tableForeignKey.onDelete)\n                    || (metadataFK.onUpdate && metadataFK.onUpdate !== tableForeignKey.onUpdate);\n            });\n            if (tableForeignKeysToDrop.length === 0)\n                continue;\n\n            this.connection.logger.logSchemaBuild(`dropping old foreign keys of ${table.name}: ${tableForeignKeysToDrop.map(dbForeignKey => dbForeignKey.name).join(\", \")}`);\n\n            // drop foreign keys from the database\n            await this.queryRunner.dropForeignKeys(table, tableForeignKeysToDrop);\n        }\n    }\n\n    /**\n     * Rename tables\n     */\n    protected async renameTables(): Promise<void> {\n        // for (const metadata of this.entityToSyncMetadatas) {\n        //     const table = this.queryRunner.loadedTables.find(table => this.getTablePath(table) === this.getTablePath(metadata));\n        // }\n    }\n\n    /**\n     * Renames columns.\n     * Works if only one column per table was changed.\n     * Changes only column name. If something besides name was changed, these changes will be ignored.\n     */\n    protected async renameColumns(): Promise<void> {\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(table => this.getTablePath(table) === this.getTablePath(metadata));\n            if (!table)\n                continue;\n\n            if (metadata.columns.length !== table.columns.length)\n                continue;\n\n            const renamedMetadataColumns = metadata.columns.filter(column => {\n                return !table.columns.find(tableColumn => {\n                    return tableColumn.name === column.databaseName\n                        && tableColumn.type === this.connection.driver.normalizeType(column)\n                        && tableColumn.isNullable === column.isNullable\n                        && tableColumn.isUnique === this.connection.driver.normalizeIsUnique(column);\n                });\n            });\n\n            if (renamedMetadataColumns.length === 0 || renamedMetadataColumns.length > 1)\n                continue;\n\n            const renamedTableColumns = table.columns.filter(tableColumn => {\n                return !metadata.columns.find(column => {\n                    return column.databaseName === tableColumn.name\n                        && this.connection.driver.normalizeType(column) === tableColumn.type\n                        && column.isNullable === tableColumn.isNullable\n                        && this.connection.driver.normalizeIsUnique(column) === tableColumn.isUnique;\n                });\n            });\n\n            if (renamedTableColumns.length === 0 || renamedTableColumns.length > 1)\n                continue;\n\n            const renamedColumn = renamedTableColumns[0].clone();\n            renamedColumn.name = renamedMetadataColumns[0].databaseName;\n\n            this.connection.logger.logSchemaBuild(`renaming column \"${renamedTableColumns[0].name}\" in to \"${renamedColumn.name}\"`);\n            await this.queryRunner.renameColumn(table, renamedTableColumns[0], renamedColumn);\n        }\n    }\n\n    protected async dropOldIndices(): Promise<void> {\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(table => this.getTablePath(table) === this.getTablePath(metadata));\n            if (!table)\n                continue;\n\n            const dropQueries = table.indices\n                .filter(tableIndex => {\n                    const indexMetadata = metadata.indices.find(index => index.name === tableIndex.name);\n                    if (indexMetadata) {\n                        if (indexMetadata.synchronize === false)\n                            return false;\n\n                        if (indexMetadata.isUnique !== tableIndex.isUnique)\n                            return true;\n\n                        if (indexMetadata.isSpatial !== tableIndex.isSpatial)\n                            return true;\n\n                        if (this.connection.driver.isFullTextColumnTypeSupported() && indexMetadata.isFulltext !== tableIndex.isFulltext)\n                            return true;\n\n                        if (indexMetadata.columns.length !== tableIndex.columnNames.length)\n                            return true;\n\n                        return !indexMetadata.columns.every(column => tableIndex.columnNames.indexOf(column.databaseName) !== -1);\n                    }\n\n                    return true;\n                })\n                .map(async tableIndex => {\n                    this.connection.logger.logSchemaBuild(`dropping an index: \"${tableIndex.name}\" from table ${table.name}`);\n                    await this.queryRunner.dropIndex(table, tableIndex);\n                });\n\n            await Promise.all(dropQueries);\n        }\n    }\n\n    protected async dropOldChecks(): Promise<void> {\n        // Mysql does not support check constraints\n        if (this.connection.driver instanceof MysqlDriver || this.connection.driver instanceof AuroraDataApiDriver)\n            return;\n\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(table => this.getTablePath(table) === this.getTablePath(metadata));\n            if (!table)\n                continue;\n\n            const oldChecks = table.checks.filter(tableCheck => {\n                return !metadata.checks.find(checkMetadata => checkMetadata.name === tableCheck.name);\n            });\n\n            if (oldChecks.length === 0)\n                continue;\n\n            this.connection.logger.logSchemaBuild(`dropping old check constraint: ${oldChecks.map(check => `\"${check.name}\"`).join(\", \")} from table \"${table.name}\"`);\n            await this.queryRunner.dropCheckConstraints(table, oldChecks);\n        }\n    }\n\n    protected async dropCompositeUniqueConstraints(): Promise<void> {\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(table => this.getTablePath(table) === this.getTablePath(metadata));\n            if (!table)\n                continue;\n\n            const compositeUniques = table.uniques.filter(tableUnique => {\n                return tableUnique.columnNames.length > 1 && !metadata.uniques.find(uniqueMetadata => uniqueMetadata.name === tableUnique.name);\n            });\n\n            if (compositeUniques.length === 0)\n                continue;\n\n            this.connection.logger.logSchemaBuild(`dropping old unique constraint: ${compositeUniques.map(unique => `\"${unique.name}\"`).join(\", \")} from table \"${table.name}\"`);\n            await this.queryRunner.dropUniqueConstraints(table, compositeUniques);\n        }\n    }\n\n    protected async dropOldExclusions(): Promise<void> {\n        // Only PostgreSQL supports exclusion constraints\n        if (!(this.connection.driver instanceof PostgresDriver))\n            return;\n\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(table => this.getTablePath(table) === this.getTablePath(metadata));\n            if (!table)\n                continue;\n\n            const oldExclusions = table.exclusions.filter(tableExclusion => {\n                return !metadata.exclusions.find(exclusionMetadata => exclusionMetadata.name === tableExclusion.name);\n            });\n\n            if (oldExclusions.length === 0)\n                continue;\n\n            this.connection.logger.logSchemaBuild(`dropping old exclusion constraint: ${oldExclusions.map(exclusion => `\"${exclusion.name}\"`).join(\", \")} from table \"${table.name}\"`);\n            await this.queryRunner.dropExclusionConstraints(table, oldExclusions);\n        }\n    }\n\n    /**\n     * Creates tables that do not exist in the database yet.\n     * New tables are created without foreign and primary keys.\n     * Primary key only can be created in conclusion with auto generated column.\n     */\n    protected async createNewTables(): Promise<void> {\n        for (const metadata of this.entityToSyncMetadatas) {\n            // check if table does not exist yet\n            const existTable = this.queryRunner.loadedTables.find(table => this.getTablePath(table) === this.getTablePath(metadata));\n            if (existTable)\n                continue;\n\n            this.connection.logger.logSchemaBuild(`creating a new table: ${this.getTablePath(metadata)}`);\n\n            // create a new table and sync it in the database\n            const table = Table.create(metadata, this.connection.driver);\n            await this.queryRunner.createTable(table, false, false);\n            this.queryRunner.loadedTables.push(table);\n        }\n    }\n\n    protected async createViews(): Promise<void> {\n        for (const metadata of this.viewEntityToSyncMetadatas) {\n            // check if view does not exist yet\n            const existView = this.queryRunner.loadedViews.find(view => {\n                const viewExpression = typeof view.expression === \"string\" ? view.expression.trim() : view.expression(this.connection).getQuery();\n                const metadataExpression = typeof metadata.expression === \"string\" ? metadata.expression.trim() : metadata.expression!(this.connection).getQuery();\n                return this.getTablePath(view) === this.getTablePath(metadata) && viewExpression === metadataExpression;\n            });\n            if (existView)\n                continue;\n\n            this.connection.logger.logSchemaBuild(`creating a new view: ${this.getTablePath(metadata)}`);\n\n            // create a new view and sync it in the database\n            const view = View.create(metadata, this.connection.driver);\n            await this.queryRunner.createView(view);\n            this.queryRunner.loadedViews.push(view);\n        }\n    }\n\n    protected async dropOldViews(): Promise<void> {\n        const droppedViews: Array<View> = [];\n        const viewEntityToSyncMetadatas = this.viewEntityToSyncMetadatas;\n        // BuIld lookup cache for finding views metadata\n        const viewToMetadata = new Map<View, EntityMetadata>();\n        for (const view of this.queryRunner.loadedViews) {\n            const viewMetadata = viewEntityToSyncMetadatas.find(metadata => {\n                return this.getTablePath(view) === this.getTablePath(metadata);\n            });\n            if(viewMetadata){\n                viewToMetadata.set(view, viewMetadata);\n            }\n        }\n        // Gather all changed view, that need a drop\n        for (const view of this.queryRunner.loadedViews) {\n            const viewMetadata = viewToMetadata.get(view);\n            if(!viewMetadata){\n                continue;\n            }\n            const viewExpression = typeof view.expression === \"string\" ? view.expression.trim() : view.expression(this.connection).getQuery();\n            const metadataExpression = typeof viewMetadata.expression === \"string\" ? viewMetadata.expression.trim() : viewMetadata.expression!(this.connection).getQuery();\n\n            if (viewExpression === metadataExpression)\n                continue;\n\n            this.connection.logger.logSchemaBuild(`dropping an old view: ${view.name}`);\n\n            // Collect view to be dropped\n            droppedViews.push(view);\n        }\n\n        // Helper function that for a given view, will recursively return list of the view and all views that depend on it\n        const viewDependencyChain = (view: View): View[] => {\n            // Get the view metadata\n            const viewMetadata = viewToMetadata.get(view);\n            let viewWithDependencies = [view];\n            // If no metadata is known for the view, simply return the view itself\n            if(!viewMetadata){\n                return viewWithDependencies;\n            }\n            // Iterate over all known views\n            for(const [currentView, currentMetadata] of viewToMetadata.entries()){\n                // Ignore self reference\n                if(currentView === view) {\n                    continue;\n                }\n                // If the currently iterated view depends on the passed in view\n                if(currentMetadata.dependsOn && (\n                    currentMetadata.dependsOn.has(viewMetadata.target) ||\n                    currentMetadata.dependsOn.has(viewMetadata.name)\n                )){\n                    // Recursively add currently iterate view and its dependents\n                    viewWithDependencies = viewWithDependencies.concat(viewDependencyChain(currentView));\n                }\n            }\n            // Return all collected views\n            return viewWithDependencies;\n        };\n\n        // Collect final list of views to be dropped in a Set so there are no duplicates\n        const droppedViewsWithDependencies: Set<View> = new Set(\n            // Collect all dropped views, and their dependencies\n            droppedViews.map(view => viewDependencyChain(view))\n            // Flattened to single Array ( can be replaced with flatMap, once supported)\n            .reduce((all, segment) => {\n                return all.concat(segment);\n            }, [])\n            // Sort the views to be dropped in creation order\n            .sort((a, b)=> {\n                return ViewUtils.viewMetadataCmp(viewToMetadata.get(a), viewToMetadata.get(b));\n            })\n            // reverse order to get drop order\n            .reverse()\n        );\n\n        // Finally emit all drop views\n        for(const view of droppedViewsWithDependencies){\n            await this.queryRunner.dropView(view);\n        }\n        this.queryRunner.loadedViews = this.queryRunner.loadedViews.filter(view => !droppedViewsWithDependencies.has(view));\n    }\n\n    /**\n     * Drops all columns that exist in the table, but does not exist in the metadata (left old).\n     * We drop their keys too, since it should be safe.\n     */\n    protected async dropRemovedColumns(): Promise<void> {\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(table => this.getTablePath(table) === this.getTablePath(metadata));\n            if (!table)\n                continue;\n\n            // find columns that exist in the database but does not exist in the metadata\n            const droppedTableColumns = table.columns.filter(tableColumn => {\n                return !metadata.columns.find(columnMetadata => columnMetadata.databaseName === tableColumn.name);\n            });\n            if (droppedTableColumns.length === 0)\n                continue;\n\n            this.connection.logger.logSchemaBuild(`columns dropped in ${table.name}: ` + droppedTableColumns.map(column => column.name).join(\", \"));\n\n            // drop columns from the database\n            await this.queryRunner.dropColumns(table, droppedTableColumns);\n        }\n    }\n\n    /**\n     * Adds columns from metadata which does not exist in the table.\n     * Columns are created without keys.\n     */\n    protected async addNewColumns(): Promise<void> {\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(table => this.getTablePath(table) === this.getTablePath(metadata));\n            if (!table)\n                continue;\n\n            // find which columns are new\n            const newColumnMetadatas = metadata.columns.filter(columnMetadata => {\n                return !table.columns.find(tableColumn => tableColumn.name === columnMetadata.databaseName);\n            });\n            if (newColumnMetadatas.length === 0)\n                continue;\n\n            // create columns in the database\n            const newTableColumnOptions = this.metadataColumnsToTableColumnOptions(newColumnMetadatas);\n            const newTableColumns = newTableColumnOptions.map(option => new TableColumn(option));\n\n            if (newTableColumns.length === 0)\n                continue;\n\n            this.connection.logger.logSchemaBuild(`new columns added: ` + newColumnMetadatas.map(column => column.databaseName).join(\", \"));\n            await this.queryRunner.addColumns(table, newTableColumns);\n        }\n    }\n\n    /**\n     * Updates composite primary keys.\n     */\n    protected async updatePrimaryKeys(): Promise<void> {\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(table => this.getTablePath(table) === this.getTablePath(metadata));\n            if (!table)\n                continue;\n\n            const primaryMetadataColumns = metadata.columns.filter(column => column.isPrimary);\n            const primaryTableColumns = table.columns.filter(column => column.isPrimary);\n            if (primaryTableColumns.length !== primaryMetadataColumns.length && primaryMetadataColumns.length > 1) {\n                const changedPrimaryColumns = primaryMetadataColumns.map(primaryMetadataColumn => {\n                    return new TableColumn(TableUtils.createTableColumnOptions(primaryMetadataColumn, this.connection.driver));\n                });\n                await this.queryRunner.updatePrimaryKeys(table, changedPrimaryColumns);\n            }\n        }\n    }\n\n    /**\n     * Update all exist columns which metadata has changed.\n     * Still don't create keys. Also we don't touch foreign keys of the changed columns.\n     */\n    protected async updateExistColumns(): Promise<void> {\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(table => this.getTablePath(table) === this.getTablePath(metadata));\n            if (!table)\n                continue;\n\n            const changedColumns = this.connection.driver.findChangedColumns(table.columns, metadata.columns);\n            if (changedColumns.length === 0)\n                continue;\n\n            // drop all foreign keys that point to this column\n            for (const changedColumn of changedColumns) {\n                await this.dropColumnReferencedForeignKeys(this.getTablePath(metadata), changedColumn.databaseName);\n            }\n\n            // drop all composite indices related to this column\n            for (const changedColumn of changedColumns) {\n                await this.dropColumnCompositeIndices(this.getTablePath(metadata), changedColumn.databaseName);\n            }\n\n            // drop all composite uniques related to this column\n            // Mysql does not support unique constraints.\n            if (!(this.connection.driver instanceof MysqlDriver || this.connection.driver instanceof AuroraDataApiDriver)) {\n                for (const changedColumn of changedColumns) {\n                    await this.dropColumnCompositeUniques(this.getTablePath(metadata), changedColumn.databaseName);\n                }\n            }\n\n            // generate a map of new/old columns\n            const newAndOldTableColumns = changedColumns.map(changedColumn => {\n                const oldTableColumn = table.columns.find(column => column.name === changedColumn.databaseName)!;\n                const newTableColumnOptions = TableUtils.createTableColumnOptions(changedColumn, this.connection.driver);\n                const newTableColumn = new TableColumn(newTableColumnOptions);\n\n                return {\n                    oldColumn: oldTableColumn,\n                    newColumn: newTableColumn\n                };\n            });\n\n            if (newAndOldTableColumns.length === 0)\n                continue;\n\n            this.connection.logger.logSchemaBuild(`columns changed in \"${table.name}\". updating: ` + changedColumns.map(column => column.databaseName).join(\", \"));\n            await this.queryRunner.changeColumns(table, newAndOldTableColumns);\n        }\n    }\n\n    /**\n     * Creates composite indices which are missing in db yet.\n     */\n    protected async createNewIndices(): Promise<void> {\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(table => this.getTablePath(table) === this.getTablePath(metadata));\n            if (!table)\n                continue;\n\n            const newIndices = metadata.indices\n                .filter(indexMetadata => !table.indices.find(tableIndex => tableIndex.name === indexMetadata.name) && indexMetadata.synchronize === true)\n                .map(indexMetadata => TableIndex.create(indexMetadata));\n\n            if (newIndices.length === 0)\n                continue;\n\n            this.connection.logger.logSchemaBuild(`adding new indices ${newIndices.map(index => `\"${index.name}\"`).join(\", \")} in table \"${table.name}\"`);\n            await this.queryRunner.createIndices(table, newIndices);\n        }\n    }\n\n    protected async createNewChecks(): Promise<void> {\n        // Mysql does not support check constraints\n        if (this.connection.driver instanceof MysqlDriver || this.connection.driver instanceof AuroraDataApiDriver)\n            return;\n\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(table => this.getTablePath(table) === this.getTablePath(metadata));\n            if (!table)\n                continue;\n\n            const newChecks = metadata.checks\n                .filter(checkMetadata => !table.checks.find(tableCheck => tableCheck.name === checkMetadata.name))\n                .map(checkMetadata => TableCheck.create(checkMetadata));\n\n            if (newChecks.length === 0)\n                continue;\n\n            this.connection.logger.logSchemaBuild(`adding new check constraints: ${newChecks.map(index => `\"${index.name}\"`).join(\", \")} in table \"${table.name}\"`);\n            await this.queryRunner.createCheckConstraints(table, newChecks);\n        }\n    }\n\n    /**\n     * Creates composite uniques which are missing in db yet.\n     */\n    protected async createCompositeUniqueConstraints(): Promise<void> {\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(table => this.getTablePath(table) === this.getTablePath(metadata));\n            if (!table)\n                continue;\n\n            const compositeUniques = metadata.uniques\n                .filter(uniqueMetadata => uniqueMetadata.columns.length > 1 && !table.uniques.find(tableUnique => tableUnique.name === uniqueMetadata.name))\n                .map(uniqueMetadata => TableUnique.create(uniqueMetadata));\n\n            if (compositeUniques.length === 0)\n                continue;\n\n            this.connection.logger.logSchemaBuild(`adding new unique constraints: ${compositeUniques.map(unique => `\"${unique.name}\"`).join(\", \")} in table \"${table.name}\"`);\n            await this.queryRunner.createUniqueConstraints(table, compositeUniques);\n        }\n    }\n\n    /**\n     * Creates exclusions which are missing in db yet.\n     */\n    protected async createNewExclusions(): Promise<void> {\n        // Only PostgreSQL supports exclusion constraints\n        if (!(this.connection.driver instanceof PostgresDriver))\n            return;\n\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(table => this.getTablePath(table) === this.getTablePath(metadata));\n            if (!table)\n                continue;\n\n            const newExclusions = metadata.exclusions\n            .filter(exclusionMetadata => !table.exclusions.find(tableExclusion => tableExclusion.name === exclusionMetadata.name))\n            .map(exclusionMetadata => TableExclusion.create(exclusionMetadata));\n\n            if (newExclusions.length === 0)\n                continue;\n\n            this.connection.logger.logSchemaBuild(`adding new exclusion constraints: ${newExclusions.map(exclusion => `\"${exclusion.name}\"`).join(\", \")} in table \"${table.name}\"`);\n            await this.queryRunner.createExclusionConstraints(table, newExclusions);\n        }\n    }\n\n    /**\n     * Creates foreign keys which does not exist in the table yet.\n     */\n    protected async createForeignKeys(): Promise<void> {\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(table => this.getTablePath(table) === this.getTablePath(metadata));\n            if (!table)\n                continue;\n\n            const newKeys = metadata.foreignKeys\n                .filter(foreignKey => {\n                return !table.foreignKeys.find(dbForeignKey => (\n                    (dbForeignKey.name === foreignKey.name) &&\n                    (this.getTablePath(dbForeignKey) === this.getTablePath(foreignKey.referencedEntityMetadata))\n                ));\n            });\n            if (newKeys.length === 0)\n                continue;\n\n            const dbForeignKeys = newKeys.map(foreignKeyMetadata => TableForeignKey.create(foreignKeyMetadata, this.connection.driver));\n            this.connection.logger.logSchemaBuild(`creating a foreign keys: ${newKeys.map(key => key.name).join(\", \")} on table \"${table.name}\"`);\n            await this.queryRunner.createForeignKeys(table, dbForeignKeys);\n        }\n    }\n\n    /**\n     * Drops all foreign keys where given column of the given table is being used.\n     */\n    protected async dropColumnReferencedForeignKeys(tablePath: string, columnName: string): Promise<void> {\n        const table = this.queryRunner.loadedTables.find(table => this.getTablePath(table) === tablePath);\n        if (!table)\n            return;\n\n        const tablesWithFK: Table[] = [];\n        const columnForeignKey = table.foreignKeys.find(foreignKey => foreignKey.columnNames.indexOf(columnName) !== -1);\n        if (columnForeignKey) {\n            const clonedTable = table.clone();\n            clonedTable.foreignKeys = [columnForeignKey];\n            tablesWithFK.push(clonedTable);\n            table.removeForeignKey(columnForeignKey);\n        }\n\n        for (const loadedTable of this.queryRunner.loadedTables) {\n            const dependForeignKeys = loadedTable.foreignKeys.filter(foreignKey => {\n                return this.getTablePath(foreignKey) === tablePath && foreignKey.referencedColumnNames.indexOf(columnName) !== -1;\n            });\n\n            if (dependForeignKeys.length > 0) {\n                const clonedTable = loadedTable.clone();\n                clonedTable.foreignKeys = dependForeignKeys;\n                tablesWithFK.push(clonedTable);\n                dependForeignKeys.forEach(dependForeignKey => loadedTable.removeForeignKey(dependForeignKey));\n            }\n        }\n\n        if (tablesWithFK.length > 0) {\n            for (const tableWithFK of tablesWithFK) {\n                this.connection.logger.logSchemaBuild(`dropping related foreign keys of ${tableWithFK.name}: ${tableWithFK.foreignKeys.map(foreignKey => foreignKey.name).join(\", \")}`);\n                await this.queryRunner.dropForeignKeys(tableWithFK, tableWithFK.foreignKeys);\n            }\n        }\n    }\n\n    /**\n     * Drops all composite indices, related to given column.\n     */\n    protected async dropColumnCompositeIndices(tablePath: string, columnName: string): Promise<void> {\n        const table = this.queryRunner.loadedTables.find(table => this.getTablePath(table) === tablePath);\n        if (!table)\n            return;\n\n        const relatedIndices = table.indices.filter(index => index.columnNames.length > 1 && index.columnNames.indexOf(columnName) !== -1);\n        if (relatedIndices.length === 0)\n            return;\n\n        this.connection.logger.logSchemaBuild(`dropping related indices of \"${tablePath}\".\"${columnName}\": ${relatedIndices.map(index => index.name).join(\", \")}`);\n        await this.queryRunner.dropIndices(table, relatedIndices);\n    }\n\n    /**\n     * Drops all composite uniques, related to given column.\n     */\n    protected async dropColumnCompositeUniques(tablePath: string, columnName: string): Promise<void> {\n        const table = this.queryRunner.loadedTables.find(table => this.getTablePath(table) === tablePath);\n        if (!table)\n            return;\n\n        const relatedUniques = table.uniques.filter(unique => unique.columnNames.length > 1 && unique.columnNames.indexOf(columnName) !== -1);\n        if (relatedUniques.length === 0)\n            return;\n\n        this.connection.logger.logSchemaBuild(`dropping related unique constraints of \"${tablePath}\".\"${columnName}\": ${relatedUniques.map(unique => unique.name).join(\", \")}`);\n        await this.queryRunner.dropUniqueConstraints(table, relatedUniques);\n    }\n\n    /**\n     * Creates new columns from the given column metadatas.\n     */\n    protected metadataColumnsToTableColumnOptions(columns: ColumnMetadata[]): TableColumnOptions[] {\n        return columns.map(columnMetadata => TableUtils.createTableColumnOptions(columnMetadata, this.connection.driver));\n    }\n\n    /**\n     * Creates typeorm service table for storing user defined Views.\n     */\n    protected async createTypeormMetadataTable(queryRunner: QueryRunner) {\n        const schema = this.currentSchema;\n        const database = this.currentDatabase;\n        const typeormMetadataTable = this.connection.driver.buildTableName(\"typeorm_metadata\", schema, database);\n\n        await queryRunner.createTable(new Table(\n            {\n                database: database,\n                schema: schema,\n                name: typeormMetadataTable,\n                columns: [\n                    {\n                        name: \"type\",\n                        type: this.connection.driver.normalizeType({type: this.connection.driver.mappedDataTypes.metadataType}),\n                        isNullable: false\n                    },\n                    {\n                        name: \"database\",\n                        type: this.connection.driver.normalizeType({type: this.connection.driver.mappedDataTypes.metadataDatabase}),\n                        isNullable: true\n                    },\n                    {\n                        name: \"schema\",\n                        type: this.connection.driver.normalizeType({type: this.connection.driver.mappedDataTypes.metadataSchema}),\n                        isNullable: true\n                    },\n                    {\n                        name: \"table\",\n                        type: this.connection.driver.normalizeType({type: this.connection.driver.mappedDataTypes.metadataTable}),\n                        isNullable: true\n                    },\n                    {\n                        name: \"name\",\n                        type: this.connection.driver.normalizeType({type: this.connection.driver.mappedDataTypes.metadataName}),\n                        isNullable: true\n                    },\n                    {\n                        name: \"value\",\n                        type: this.connection.driver.normalizeType({type: this.connection.driver.mappedDataTypes.metadataValue}),\n                        isNullable: true\n                    },\n                ]\n            },\n        ), true);\n    }\n}\n"],"sourceRoot":".."}