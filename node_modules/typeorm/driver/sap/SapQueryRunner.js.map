{"version":3,"sources":["../../src/driver/sap/SapQueryRunner.ts"],"names":[],"mappings":"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","file":"SapQueryRunner.js","sourcesContent":["import {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {QueryRunnerAlreadyReleasedError} from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport {TransactionAlreadyStartedError} from \"../../error/TransactionAlreadyStartedError\";\nimport {TransactionNotStartedError} from \"../../error/TransactionNotStartedError\";\nimport {ColumnType} from \"../types/ColumnTypes\";\nimport {ReadStream} from \"../../platform/PlatformTools\";\nimport {BaseQueryRunner} from \"../../query-runner/BaseQueryRunner\";\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {TableIndexOptions} from \"../../schema-builder/options/TableIndexOptions\";\nimport {Table} from \"../../schema-builder/table/Table\";\nimport {TableCheck} from \"../../schema-builder/table/TableCheck\";\nimport {TableColumn} from \"../../schema-builder/table/TableColumn\";\nimport {TableExclusion} from \"../../schema-builder/table/TableExclusion\";\nimport {TableForeignKey} from \"../../schema-builder/table/TableForeignKey\";\nimport {TableIndex} from \"../../schema-builder/table/TableIndex\";\nimport {TableUnique} from \"../../schema-builder/table/TableUnique\";\nimport {View} from \"../../schema-builder/view/View\";\nimport {Broadcaster} from \"../../subscriber/Broadcaster\";\nimport {OrmUtils} from \"../../util/OrmUtils\";\nimport {Query} from \"../Query\";\nimport {IsolationLevel} from \"../types/IsolationLevel\";\nimport {SapDriver} from \"./SapDriver\";\nimport {ReplicationMode} from \"../types/ReplicationMode\";\nimport { QueryFailedError, TypeORMError } from \"../../error\";\nimport { QueryResult } from \"../../query-runner/QueryResult\";\nimport { QueryLock } from \"../../query-runner/QueryLock\";\nimport {MetadataTableType} from \"../types/MetadataTableType\";\n\n/**\n * Runs queries on a single SQL Server database connection.\n */\nexport class SapQueryRunner extends BaseQueryRunner implements QueryRunner {\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Database driver used by connection.\n     */\n    driver: SapDriver;\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Promise used to obtain a database connection from a pool for a first time.\n     */\n    protected databaseConnectionPromise: Promise<any>;\n\n    private lock: QueryLock = new QueryLock();\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(driver: SapDriver, mode: ReplicationMode) {\n        super();\n        this.driver = driver;\n        this.connection = driver.connection;\n        this.broadcaster = new Broadcaster(this);\n        this.mode = mode;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates/uses database connection from the connection pool to perform further operations.\n     * Returns obtained database connection.\n     */\n    async connect(): Promise<any> {\n        if (this.databaseConnection)\n            return this.databaseConnection;\n\n        this.databaseConnection = await this.driver.obtainMasterConnection();\n\n        return this.databaseConnection;\n    }\n\n    /**\n     * Releases used database connection.\n     * You cannot use query runner methods once its released.\n     */\n    release(): Promise<void> {\n        this.isReleased = true;\n\n        if (this.databaseConnection) {\n            return this.driver.master.release(this.databaseConnection);\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Starts transaction.\n     */\n    async startTransaction(isolationLevel?: IsolationLevel): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        if (this.isTransactionActive)\n            throw new TransactionAlreadyStartedError();\n\n        await this.broadcaster.broadcast('BeforeTransactionStart');\n\n        this.isTransactionActive = true;\n\n        if (isolationLevel) {\n            await this.query(`SET TRANSACTION ISOLATION LEVEL ${isolationLevel || \"\"}`);\n        }\n\n        await this.broadcaster.broadcast('AfterTransactionStart');\n    }\n\n    /**\n     * Commits transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async commitTransaction(): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        if (!this.isTransactionActive)\n            throw new TransactionNotStartedError();\n\n        await this.broadcaster.broadcast('BeforeTransactionCommit');\n\n        await this.query(\"COMMIT\");\n        this.isTransactionActive = false;\n\n        await this.broadcaster.broadcast('AfterTransactionCommit');\n    }\n\n    /**\n     * Rollbacks transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async rollbackTransaction(): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        if (!this.isTransactionActive)\n            throw new TransactionNotStartedError();\n\n        await this.broadcaster.broadcast('BeforeTransactionRollback');\n\n        await this.query(\"ROLLBACK\");\n        this.isTransactionActive = false;\n\n        await this.broadcaster.broadcast('AfterTransactionRollback');\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    async query(query: string, parameters?: any[], useStructuredResult = false): Promise<any> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const release = await this.lock.acquire();\n\n        let statement: any;\n        const result = new QueryResult();\n\n        try {\n            const databaseConnection = await this.connect();\n            // we disable autocommit because ROLLBACK does not work in autocommit mode\n            databaseConnection.setAutoCommit(!this.isTransactionActive);\n            this.driver.connection.logger.logQuery(query, parameters, this);\n            const queryStartTime = +new Date();\n            const isInsertQuery = query.substr(0, 11) === \"INSERT INTO\";\n\n            statement = databaseConnection.prepare(query);\n\n            const raw = await new Promise<any>((ok, fail) => {\n                statement.exec(\n                    parameters,\n                    (err: any, raw: any) => err ? fail(new QueryFailedError(query, parameters, err)) : ok(raw)\n                )\n            });\n\n            // log slow queries if maxQueryExecution time is set\n            const maxQueryExecutionTime = this.driver.connection.options.maxQueryExecutionTime;\n            const queryEndTime = +new Date();\n            const queryExecutionTime = queryEndTime - queryStartTime;\n            if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime) {\n                this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);\n            }\n\n            if (typeof raw === \"number\") {\n                result.affected = raw;\n            } else if (Array.isArray(raw)) {\n                result.records = raw;\n            }\n\n            result.raw = raw;\n\n            if (isInsertQuery) {\n                const lastIdQuery = `SELECT CURRENT_IDENTITY_VALUE() FROM \"SYS\".\"DUMMY\"`;\n                this.driver.connection.logger.logQuery(lastIdQuery, [], this);\n                const identityValueResult = await new Promise<any>((ok, fail) => {\n                    databaseConnection.exec(\n                        lastIdQuery,\n                        (err: any, raw: any) => err ? fail(new QueryFailedError(lastIdQuery, [], err)) : ok(raw)\n                    );\n                });\n\n                result.raw = identityValueResult[0][\"CURRENT_IDENTITY_VALUE()\"];\n                result.records = identityValueResult;\n            }\n        } catch (e) {\n            this.driver.connection.logger.logQueryError(e, query, parameters, this);\n            throw e;\n        } finally {\n            // Never forget to drop the statement we reserved\n            if (statement?.drop) {\n                await new Promise<void>((ok) => statement.drop(() => ok()));\n            }\n\n            // Always release the lock.\n            release();\n        }\n\n        if (useStructuredResult) {\n            return result;\n        } else {\n            return result.raw;\n        }\n    }\n\n    /**\n     * Returns raw data stream.\n     */\n    async stream(query: string, parameters?: any[], onEnd?: Function, onError?: Function): Promise<ReadStream> {\n        throw new TypeORMError(`Stream is not supported by SAP driver.`);\n    }\n\n    /**\n     * Returns all available database names including system databases.\n     */\n    async getDatabases(): Promise<string[]> {\n        const results: ObjectLiteral[] = await this.query(`SELECT DATABASE_NAME FROM \"SYS\".\"M_DATABASES\"`);\n        return results.map(result => result[\"DATABASE_NAME\"]);\n    }\n\n    /**\n     * Returns all available schema names including system schemas.\n     * If database parameter specified, returns schemas of that database.\n     */\n    async getSchemas(database?: string): Promise<string[]> {\n        const query = database ? `SELECT * FROM \"${database}\".\"SYS\".\"SCHEMAS\"` : `SELECT * FROM \"SYS\".\"SCHEMAS\"`;\n        const results: ObjectLiteral[] = await this.query(query);\n        return results.map(result => result[\"SCHEMA_NAME\"]);\n    }\n\n    /**\n     * Checks if database with the given name exist.\n     */\n    async hasDatabase(database: string): Promise<boolean> {\n        const databases = await this.getDatabases();\n        return databases.indexOf(database) !== -1;\n    }\n\n    /**\n     * Returns current database.\n     */\n    async getCurrentDatabase(): Promise<string> {\n        const currentDBQuery = await this.query(`SELECT \"VALUE\" AS \"db_name\" FROM \"SYS\".\"M_SYSTEM_OVERVIEW\" WHERE \"SECTION\" = 'System' and \"NAME\" = 'Instance ID'`);\n        return currentDBQuery[0][\"db_name\"];\n    }\n\n    /**\n     * Checks if schema with the given name exist.\n     */\n    async hasSchema(schema: string): Promise<boolean> {\n        const schemas = await this.getSchemas();\n        return schemas.indexOf(schema) !== -1;\n    }\n\n    /**\n     * Returns current schema.\n     */\n    async getCurrentSchema(): Promise<string> {\n        const currentSchemaQuery = await this.query(`SELECT CURRENT_SCHEMA AS \"schema_name\" FROM \"SYS\".\"DUMMY\"`);\n        return currentSchemaQuery[0][\"schema_name\"];\n    }\n\n    /**\n     * Checks if table with the given name exist in the database.\n     */\n    async hasTable(tableOrName: Table|string): Promise<boolean> {\n        const parsedTableName = this.driver.parseTableName(tableOrName);\n\n        if (!parsedTableName.schema) {\n            parsedTableName.schema = await this.getCurrentSchema();\n        }\n\n        const sql = `SELECT * FROM \"SYS\".\"TABLES\" WHERE \"SCHEMA_NAME\" = '${parsedTableName.schema}' AND \"TABLE_NAME\" = '${parsedTableName.tableName}'`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n\n    /**\n     * Checks if column with the given name exist in the given table.\n     */\n    async hasColumn(tableOrName: Table|string, columnName: string): Promise<boolean> {\n        const parsedTableName = this.driver.parseTableName(tableOrName);\n\n        if (!parsedTableName.schema) {\n            parsedTableName.schema = await this.getCurrentSchema();\n        }\n\n        const sql = `SELECT * FROM \"SYS\".\"TABLE_COLUMNS\" WHERE \"SCHEMA_NAME\" = ${parsedTableName.schema} AND \"TABLE_NAME\" = ${parsedTableName.tableName} AND \"COLUMN_NAME\" = '${columnName}'`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n\n    /**\n     * Creates a new database.\n     */\n    async createDatabase(database: string, ifNotExist?: boolean): Promise<void> {\n        return Promise.resolve();\n    }\n\n    /**\n     * Drops database.\n     */\n    async dropDatabase(database: string, ifExist?: boolean): Promise<void> {\n        return Promise.resolve();\n    }\n\n    /**\n     * Creates a new table schema.\n     */\n    async createSchema(schemaPath: string, ifNotExist?: boolean): Promise<void> {\n        const schema = schemaPath.indexOf(\".\") === -1 ? schemaPath : schemaPath.split(\".\")[1];\n\n        let exist = false;\n        if (ifNotExist) {\n            const result = await this.query(`SELECT * FROM \"SYS\".\"SCHEMAS\" WHERE \"SCHEMA_NAME\" = '${schema}'`);\n            exist = !!result.length;\n        }\n        if (!ifNotExist || (ifNotExist && !exist)) {\n            const up = `CREATE SCHEMA \"${schema}\"`;\n            const down = `DROP SCHEMA \"${schema}\" CASCADE`;\n            await this.executeQueries(new Query(up), new Query(down));\n        }\n    }\n\n    /**\n     * Drops table schema\n     */\n    async dropSchema(schemaPath: string, ifExist?: boolean, isCascade?: boolean): Promise<void> {\n        const schema = schemaPath.indexOf(\".\") === -1 ? schemaPath : schemaPath.split(\".\")[0];\n        let exist = false;\n        if (ifExist) {\n            const result = await this.query(`SELECT * FROM \"SYS\".\"SCHEMAS\" WHERE \"SCHEMA_NAME\" = '${schema}'`);\n            exist = !!result.length;\n        }\n        if (!ifExist || (ifExist && exist)) {\n            const up = `DROP SCHEMA \"${schema}\" ${isCascade ? \"CASCADE\" : \"\"}`;\n            const down = `CREATE SCHEMA \"${schema}\"`;\n            await this.executeQueries(new Query(up), new Query(down));\n        }\n    }\n\n    /**\n     * Creates a new table.\n     */\n    async createTable(table: Table, ifNotExist: boolean = false, createForeignKeys: boolean = true, createIndices: boolean = true): Promise<void> {\n        if (ifNotExist) {\n            const isTableExist = await this.hasTable(table);\n            if (isTableExist) return Promise.resolve();\n        }\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        upQueries.push(this.createTableSql(table, createForeignKeys));\n        downQueries.push(this.dropTableSql(table));\n\n        // if createForeignKeys is true, we must drop created foreign keys in down query.\n        // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.\n        if (createForeignKeys)\n            table.foreignKeys.forEach(foreignKey => downQueries.push(this.dropForeignKeySql(table, foreignKey)));\n\n        if (createIndices) {\n            table.indices.forEach(index => {\n\n                // new index may be passed without name. In this case we generate index name manually.\n                if (!index.name)\n                    index.name = this.connection.namingStrategy.indexName(table, index.columnNames, index.where);\n                upQueries.push(this.createIndexSql(table, index));\n                downQueries.push(this.dropIndexSql(table, index));\n            });\n        }\n\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Drops the table.\n     */\n    async dropTable(tableOrName: Table|string, ifExist?: boolean, dropForeignKeys: boolean = true, dropIndices: boolean = true): Promise<void> {\n        if (ifExist) {\n            const isTableExist = await this.hasTable(tableOrName);\n            if (!isTableExist) return Promise.resolve();\n        }\n\n        // if dropTable called with dropForeignKeys = true, we must create foreign keys in down query.\n        const createForeignKeys: boolean = dropForeignKeys;\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        // It needs because if table does not exist and dropForeignKeys or dropIndices is true, we don't need\n        // to perform drop queries for foreign keys and indices.\n\n        if (dropIndices) {\n            table.indices.forEach(index => {\n                upQueries.push(this.dropIndexSql(table, index));\n                downQueries.push(this.createIndexSql(table, index));\n            });\n        }\n\n        // if dropForeignKeys is true, we just drop the table, otherwise we also drop table foreign keys.\n        // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.\n        if (dropForeignKeys)\n            table.foreignKeys.forEach(foreignKey => upQueries.push(this.dropForeignKeySql(table, foreignKey)));\n\n        upQueries.push(this.dropTableSql(table));\n        downQueries.push(this.createTableSql(table, createForeignKeys));\n\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Creates a new view.\n     */\n    async createView(view: View): Promise<void> {\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n        upQueries.push(this.createViewSql(view));\n        upQueries.push(await this.insertViewDefinitionSql(view));\n        downQueries.push(this.dropViewSql(view));\n        downQueries.push(await this.deleteViewDefinitionSql(view));\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Drops the view.\n     */\n    async dropView(target: View|string): Promise<void> {\n        const viewName = target instanceof View ? target.name : target;\n        const view = await this.getCachedView(viewName);\n\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n        upQueries.push(await this.deleteViewDefinitionSql(view));\n        upQueries.push(this.dropViewSql(view));\n        downQueries.push(await this.insertViewDefinitionSql(view));\n        downQueries.push(this.createViewSql(view));\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Renames a table.\n     */\n    async renameTable(oldTableOrName: Table|string, newTableName: string): Promise<void> {\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n        const oldTable = oldTableOrName instanceof Table ? oldTableOrName : await this.getCachedTable(oldTableOrName);\n        const newTable = oldTable.clone();\n\n        const { schema: schemaName, tableName: oldTableName } = this.driver.parseTableName(oldTable);\n\n        newTable.name = schemaName ? `${schemaName}.${newTableName}` : newTableName;\n\n        // rename table\n        upQueries.push(new Query(`RENAME TABLE ${this.escapePath(oldTable)} TO ${this.escapePath(newTableName)}`));\n        downQueries.push(new Query(`RENAME TABLE ${this.escapePath(newTable)} TO ${this.escapePath(oldTableName)}`));\n\n        // drop old FK's. Foreign keys must be dropped before the primary keys are dropped\n        newTable.foreignKeys.forEach(foreignKey => {\n            upQueries.push(this.dropForeignKeySql(newTable, foreignKey));\n            downQueries.push(this.createForeignKeySql(newTable, foreignKey));\n        });\n\n        // SAP HANA does not allow to drop PK's which is referenced by foreign keys.\n        // To avoid this, we must drop all referential foreign keys and recreate them later\n        const referencedForeignKeySql = `SELECT * FROM \"SYS\".\"REFERENTIAL_CONSTRAINTS\" WHERE \"REFERENCED_SCHEMA_NAME\" = '${schemaName}' AND \"REFERENCED_TABLE_NAME\" = '${oldTableName}'`;\n        const dbForeignKeys: ObjectLiteral[] = await this.query(referencedForeignKeySql);\n        let referencedForeignKeys: TableForeignKey[] = [];\n        const referencedForeignKeyTableMapping: { tableName: string, fkName: string }[] = [];\n        if (dbForeignKeys.length > 0) {\n            referencedForeignKeys = dbForeignKeys.map(dbForeignKey => {\n                const foreignKeys = dbForeignKeys.filter(dbFk => dbFk[\"CONSTRAINT_NAME\"] === dbForeignKey[\"CONSTRAINT_NAME\"]);\n\n                referencedForeignKeyTableMapping.push({ tableName: `${dbForeignKey[\"SCHEMA_NAME\"]}.${dbForeignKey[\"TABLE_NAME\"]}`, fkName: dbForeignKey[\"CONSTRAINT_NAME\"] });\n                return new TableForeignKey({\n                    name: dbForeignKey[\"CONSTRAINT_NAME\"],\n                    columnNames: foreignKeys.map(dbFk => dbFk[\"COLUMN_NAME\"]),\n                    referencedDatabase: newTable.database,\n                    referencedSchema: newTable.schema,\n                    referencedTableName: newTable.name, // we use renamed table name\n                    referencedColumnNames: foreignKeys.map(dbFk => dbFk[\"REFERENCED_COLUMN_NAME\"]),\n                    onDelete: dbForeignKey[\"DELETE_RULE\"] === \"RESTRICT\" ? \"NO ACTION\" : dbForeignKey[\"DELETE_RULE\"],\n                    onUpdate: dbForeignKey[\"UPDATE_RULE\"] === \"RESTRICT\" ? \"NO ACTION\" : dbForeignKey[\"UPDATE_RULE\"],\n                });\n            });\n\n            // drop referenced foreign keys\n            referencedForeignKeys.forEach(foreignKey => {\n                const mapping = referencedForeignKeyTableMapping.find(it => it.fkName === foreignKey.name);\n                upQueries.push(this.dropForeignKeySql(mapping!.tableName, foreignKey));\n                downQueries.push(this.createForeignKeySql(mapping!.tableName, foreignKey));\n            });\n        }\n\n        // rename primary key constraint\n        if (newTable.primaryColumns.length > 0) {\n            const columnNames = newTable.primaryColumns.map(column => column.name);\n            const columnNamesString = columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n\n            const oldPkName = this.connection.namingStrategy.primaryKeyName(oldTable, columnNames);\n            const newPkName = this.connection.namingStrategy.primaryKeyName(newTable, columnNames);\n\n            // drop old PK\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(newTable)} DROP CONSTRAINT \"${oldPkName}\"`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(newTable)} ADD CONSTRAINT \"${oldPkName}\" PRIMARY KEY (${columnNamesString})`));\n\n            // create new PK\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(newTable)} ADD CONSTRAINT \"${newPkName}\" PRIMARY KEY (${columnNamesString})`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(newTable)} DROP CONSTRAINT \"${newPkName}\"`));\n        }\n\n        // recreate foreign keys with new constraint names\n        newTable.foreignKeys.forEach(foreignKey => {\n            // replace constraint name\n            foreignKey.name = this.connection.namingStrategy.foreignKeyName(newTable, foreignKey.columnNames, this.getTablePath(foreignKey), foreignKey.referencedColumnNames);\n\n            // create new FK's\n            upQueries.push(this.createForeignKeySql(newTable, foreignKey));\n            downQueries.push(this.dropForeignKeySql(newTable, foreignKey));\n        });\n\n        // restore referenced foreign keys\n        referencedForeignKeys.forEach(foreignKey => {\n            const mapping = referencedForeignKeyTableMapping.find(it => it.fkName === foreignKey.name);\n            upQueries.push(this.createForeignKeySql(mapping!.tableName, foreignKey));\n            downQueries.push(this.dropForeignKeySql(mapping!.tableName, foreignKey));\n        });\n\n        // rename index constraints\n        newTable.indices.forEach(index => {\n            // build new constraint name\n            const newIndexName = this.connection.namingStrategy.indexName(newTable, index.columnNames, index.where);\n\n            // drop old index\n            upQueries.push(this.dropIndexSql(newTable, index));\n            downQueries.push(this.createIndexSql(newTable, index));\n\n            // replace constraint name\n            index.name = newIndexName;\n\n            // create new index\n            upQueries.push(this.createIndexSql(newTable, index));\n            downQueries.push(this.dropIndexSql(newTable, index));\n        });\n\n        await this.executeQueries(upQueries, downQueries);\n\n        // rename old table and replace it in cached tabled;\n        oldTable.name = newTable.name;\n        this.replaceCachedTable(oldTable, newTable);\n    }\n\n    /**\n     * Creates a new column from the column in the table.\n     */\n    async addColumn(tableOrName: Table|string, column: TableColumn): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const parsedTableName = this.driver.parseTableName(table);\n\n        if (!parsedTableName.schema) {\n            parsedTableName.schema = await this.getCurrentSchema();\n        }\n\n        const clonedTable = table.clone();\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        upQueries.push(new Query(this.addColumnSql(table, column)));\n        downQueries.push(new Query(this.dropColumnSql(table, column)));\n\n        // create or update primary key constraint\n        if (column.isPrimary) {\n            const primaryColumns = clonedTable.primaryColumns;\n            // if table already have primary key, me must drop it and recreate again\n            if (primaryColumns.length > 0) {\n                // SAP HANA does not allow to drop PK's which is referenced by foreign keys.\n                // To avoid this, we must drop all referential foreign keys and recreate them later\n                const referencedForeignKeySql = `SELECT * FROM \"SYS\".\"REFERENTIAL_CONSTRAINTS\" WHERE \"REFERENCED_SCHEMA_NAME\" = '${parsedTableName.schema}' AND \"REFERENCED_TABLE_NAME\" = '${parsedTableName.tableName}'`;\n                const dbForeignKeys: ObjectLiteral[] = await this.query(referencedForeignKeySql);\n                let referencedForeignKeys: TableForeignKey[] = [];\n                const referencedForeignKeyTableMapping: { tableName: string, fkName: string }[] = [];\n                if (dbForeignKeys.length > 0) {\n                    referencedForeignKeys = dbForeignKeys.map(dbForeignKey => {\n                        const foreignKeys = dbForeignKeys.filter(dbFk => dbFk[\"CONSTRAINT_NAME\"] === dbForeignKey[\"CONSTRAINT_NAME\"]);\n\n                        referencedForeignKeyTableMapping.push({ tableName: `${dbForeignKey[\"SCHEMA_NAME\"]}.${dbForeignKey[\"TABLE_NAME\"]}`, fkName: dbForeignKey[\"CONSTRAINT_NAME\"] });\n                        return new TableForeignKey({\n                            name: dbForeignKey[\"CONSTRAINT_NAME\"],\n                            columnNames: foreignKeys.map(dbFk => dbFk[\"COLUMN_NAME\"]),\n                            referencedDatabase: table.database,\n                            referencedSchema: table.schema,\n                            referencedTableName: table.name,\n                            referencedColumnNames: foreignKeys.map(dbFk => dbFk[\"REFERENCED_COLUMN_NAME\"]),\n                            onDelete: dbForeignKey[\"DELETE_RULE\"] === \"RESTRICT\" ? \"NO ACTION\" : dbForeignKey[\"DELETE_RULE\"],\n                            onUpdate: dbForeignKey[\"UPDATE_RULE\"] === \"RESTRICT\" ? \"NO ACTION\" : dbForeignKey[\"UPDATE_RULE\"],\n                        });\n                    });\n\n                    // drop referenced foreign keys\n                    referencedForeignKeys.forEach(foreignKey => {\n                        const mapping = referencedForeignKeyTableMapping.find(it => it.fkName === foreignKey.name);\n                        upQueries.push(this.dropForeignKeySql(mapping!.tableName, foreignKey));\n                        downQueries.push(this.createForeignKeySql(mapping!.tableName, foreignKey));\n                    });\n                }\n\n                const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable, primaryColumns.map(column => column.name));\n                const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n                upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n                downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n\n                // restore referenced foreign keys\n                referencedForeignKeys.forEach(foreignKey => {\n                    const mapping = referencedForeignKeyTableMapping.find(it => it.fkName === foreignKey.name);\n                    upQueries.push(this.createForeignKeySql(mapping!.tableName, foreignKey));\n                    downQueries.push(this.dropForeignKeySql(mapping!.tableName, foreignKey));\n                });\n            }\n\n            primaryColumns.push(column);\n            const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable, primaryColumns.map(column => column.name));\n            const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n        }\n\n        // create column index\n        const columnIndex = clonedTable.indices.find(index => index.columnNames.length === 1 && index.columnNames[0] === column.name);\n        if (columnIndex) {\n            upQueries.push(this.createIndexSql(table, columnIndex));\n            downQueries.push(this.dropIndexSql(table, columnIndex));\n\n        } else if (column.isUnique) {\n            const uniqueIndex = new TableIndex({\n                name: this.connection.namingStrategy.indexName(table, [column.name]),\n                columnNames: [column.name],\n                isUnique: true\n            });\n            clonedTable.indices.push(uniqueIndex);\n            clonedTable.uniques.push(new TableUnique({\n                name: uniqueIndex.name,\n                columnNames: uniqueIndex.columnNames\n            }));\n            upQueries.push(this.createIndexSql(table, uniqueIndex));\n            downQueries.push(this.dropIndexSql(table, uniqueIndex));\n        }\n\n        await this.executeQueries(upQueries, downQueries);\n\n        clonedTable.addColumn(column);\n        this.replaceCachedTable(table, clonedTable);\n    }\n\n    /**\n     * Creates a new columns from the column in the table.\n     */\n    async addColumns(tableOrName: Table|string, columns: TableColumn[]): Promise<void> {\n        for (const column of columns) {\n            await this.addColumn(tableOrName, column);\n        }\n    }\n\n    /**\n     * Renames column in the given table.\n     */\n    async renameColumn(tableOrName: Table|string, oldTableColumnOrName: TableColumn|string, newTableColumnOrName: TableColumn|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const oldColumn = oldTableColumnOrName instanceof TableColumn ? oldTableColumnOrName : table.columns.find(c => c.name === oldTableColumnOrName);\n        if (!oldColumn)\n            throw new TypeORMError(`Column \"${oldTableColumnOrName}\" was not found in the \"${table.name}\" table.`);\n\n        let newColumn: TableColumn|undefined = undefined;\n        if (newTableColumnOrName instanceof TableColumn) {\n            newColumn = newTableColumnOrName;\n        } else {\n            newColumn = oldColumn.clone();\n            newColumn.name = newTableColumnOrName;\n        }\n\n        await this.changeColumn(table, oldColumn, newColumn);\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumn(tableOrName: Table|string, oldTableColumnOrName: TableColumn|string, newColumn: TableColumn): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        let clonedTable = table.clone();\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        const oldColumn = oldTableColumnOrName instanceof TableColumn\n            ? oldTableColumnOrName\n            : table.columns.find(column => column.name === oldTableColumnOrName);\n        if (!oldColumn)\n            throw new TypeORMError(`Column \"${oldTableColumnOrName}\" was not found in the \"${table.name}\" table.`);\n\n        if ((newColumn.isGenerated !== oldColumn.isGenerated && newColumn.generationStrategy !== \"uuid\") || newColumn.type !== oldColumn.type || newColumn.length !== oldColumn.length) {\n            // SQL Server does not support changing of IDENTITY column, so we must drop column and recreate it again.\n            // Also, we recreate column if column type changed\n            await this.dropColumn(table, oldColumn);\n            await this.addColumn(table, newColumn);\n\n            // update cloned table\n            clonedTable = table.clone();\n\n        } else {\n            if (newColumn.name !== oldColumn.name) {\n\n                // rename column\n                upQueries.push(new Query(`RENAME COLUMN ${this.escapePath(table)}.\"${oldColumn.name}\" TO \"${newColumn.name}\"`));\n                downQueries.push(new Query(`RENAME COLUMN ${this.escapePath(table)}.\"${newColumn.name}\" TO \"${oldColumn.name}\"`));\n\n                if (oldColumn.isPrimary === true) {\n                    const primaryColumns = clonedTable.primaryColumns;\n\n                    // build old primary constraint name\n                    const columnNames = primaryColumns.map(column => column.name);\n                    const oldPkName = this.connection.namingStrategy.primaryKeyName(clonedTable, columnNames);\n\n                    // replace old column name with new column name\n                    columnNames.splice(columnNames.indexOf(oldColumn.name), 1);\n                    columnNames.push(newColumn.name);\n                    const columnNamesString = columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n\n                    // drop old PK\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} DROP CONSTRAINT \"${oldPkName}\"`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} ADD CONSTRAINT \"${oldPkName}\" PRIMARY KEY (${columnNamesString})`));\n\n                    // build new primary constraint name\n                    const newPkName = this.connection.namingStrategy.primaryKeyName(clonedTable, columnNames);\n\n                    // create new PK\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} ADD CONSTRAINT \"${newPkName}\" PRIMARY KEY (${columnNamesString})`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} DROP CONSTRAINT \"${newPkName}\"`));\n                }\n\n                // rename index constraints\n                clonedTable.findColumnIndices(oldColumn).forEach(index => {\n                    // build new constraint name\n                    index.columnNames.splice(index.columnNames.indexOf(oldColumn.name), 1);\n                    index.columnNames.push(newColumn.name);\n                    const newIndexName = this.connection.namingStrategy.indexName(clonedTable, index.columnNames, index.where);\n\n                    // drop old index\n                    upQueries.push(this.dropIndexSql(clonedTable, index));\n                    downQueries.push(this.createIndexSql(clonedTable, index));\n\n                    // replace constraint name\n                    index.name = newIndexName;\n\n                    // create new index\n                    upQueries.push(this.createIndexSql(clonedTable, index));\n                    downQueries.push(this.dropIndexSql(clonedTable, index));\n                });\n\n                // rename foreign key constraints\n                clonedTable.findColumnForeignKeys(oldColumn).forEach(foreignKey => {\n                    // build new constraint name\n                    foreignKey.columnNames.splice(foreignKey.columnNames.indexOf(oldColumn.name), 1);\n                    foreignKey.columnNames.push(newColumn.name);\n                    const newForeignKeyName = this.connection.namingStrategy.foreignKeyName(clonedTable, foreignKey.columnNames, this.getTablePath(foreignKey), foreignKey.referencedColumnNames);\n\n                    upQueries.push(this.dropForeignKeySql(clonedTable, foreignKey));\n                    downQueries.push(this.createForeignKeySql(clonedTable, foreignKey));\n\n                    // replace constraint name\n                    foreignKey.name = newForeignKeyName;\n\n                    // create new FK's\n                    upQueries.push(this.createForeignKeySql(clonedTable, foreignKey));\n                    downQueries.push(this.dropForeignKeySql(clonedTable, foreignKey));\n                });\n\n                // rename check constraints\n                clonedTable.findColumnChecks(oldColumn).forEach(check => {\n                    // build new constraint name\n                    check.columnNames!.splice(check.columnNames!.indexOf(oldColumn.name), 1);\n                    check.columnNames!.push(newColumn.name);\n                    const newCheckName = this.connection.namingStrategy.checkConstraintName(clonedTable, check.expression!);\n\n                    upQueries.push(this.dropCheckConstraintSql(clonedTable, check));\n                    downQueries.push(this.createCheckConstraintSql(clonedTable, check));\n\n                    // replace constraint name\n                    check.name = newCheckName;\n\n                    upQueries.push(this.createCheckConstraintSql(clonedTable, check));\n                    downQueries.push(this.dropCheckConstraintSql(clonedTable, check));\n                });\n\n                // rename old column in the Table object\n                const oldTableColumn = clonedTable.columns.find(column => column.name === oldColumn.name);\n                clonedTable.columns[clonedTable.columns.indexOf(oldTableColumn!)].name = newColumn.name;\n                oldColumn.name = newColumn.name;\n            }\n\n            if (this.isColumnChanged(oldColumn, newColumn)) {\n                upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER (${this.buildCreateColumnSql(newColumn)})`));\n                downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER (${this.buildCreateColumnSql(oldColumn)})`));\n            }\n\n            if (newColumn.isPrimary !== oldColumn.isPrimary) {\n                const primaryColumns = clonedTable.primaryColumns;\n\n                // if primary column state changed, we must always drop existed constraint.\n                if (primaryColumns.length > 0) {\n                    const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable, primaryColumns.map(column => column.name));\n                    const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n                }\n\n                if (newColumn.isPrimary === true) {\n                    primaryColumns.push(newColumn);\n                    // update column in table\n                    const column = clonedTable.columns.find(column => column.name === newColumn.name);\n                    column!.isPrimary = true;\n                    const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable, primaryColumns.map(column => column.name));\n                    const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n\n                } else {\n                    const primaryColumn = primaryColumns.find(c => c.name === newColumn.name);\n                    primaryColumns.splice(primaryColumns.indexOf(primaryColumn!), 1);\n\n                    // update column in table\n                    const column = clonedTable.columns.find(column => column.name === newColumn.name);\n                    column!.isPrimary = false;\n\n                    // if we have another primary keys, we must recreate constraint.\n                    if (primaryColumns.length > 0) {\n                        const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable, primaryColumns.map(column => column.name));\n                        const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n                        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n                        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n                    }\n                }\n            }\n\n            if (newColumn.isUnique !== oldColumn.isUnique) {\n                if (newColumn.isUnique === true) {\n                    const uniqueIndex = new TableIndex({\n                        name: this.connection.namingStrategy.indexName(table, [newColumn.name]),\n                        columnNames: [newColumn.name],\n                        isUnique: true\n                    });\n                    clonedTable.indices.push(uniqueIndex);\n                    clonedTable.uniques.push(new TableUnique({\n                        name: uniqueIndex.name,\n                        columnNames: uniqueIndex.columnNames\n                    }));\n                    upQueries.push(this.createIndexSql(table, uniqueIndex));\n                    downQueries.push(this.dropIndexSql(table, uniqueIndex));\n\n                } else {\n                    const uniqueIndex = clonedTable.indices.find(index => {\n                        return index.columnNames.length === 1 && index.isUnique === true && !!index.columnNames.find(columnName => columnName === newColumn.name);\n                    });\n                    clonedTable.indices.splice(clonedTable.indices.indexOf(uniqueIndex!), 1);\n\n                    const tableUnique = clonedTable.uniques.find(unique => unique.name === uniqueIndex!.name);\n                    clonedTable.uniques.splice(clonedTable.uniques.indexOf(tableUnique!), 1);\n\n                    upQueries.push(this.dropIndexSql(table, uniqueIndex!));\n                    downQueries.push(this.createIndexSql(table, uniqueIndex!));\n                }\n            }\n\n            if (newColumn.default !== oldColumn.default) {\n                if (newColumn.default !== null && newColumn.default !== undefined) {\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER (\"${newColumn.name}\" ${this.connection.driver.createFullType(newColumn)} DEFAULT ${newColumn.default})`));\n\n                    if (oldColumn.default !== null && oldColumn.default !== undefined) {\n                        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER (\"${oldColumn.name}\" ${this.connection.driver.createFullType(oldColumn)} DEFAULT ${oldColumn.default})`));\n                    } else {\n                        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER (\"${oldColumn.name}\" ${this.connection.driver.createFullType(oldColumn)} DEFAULT NULL)`));\n                    }\n\n                } else if (oldColumn.default !== null && oldColumn.default !== undefined) {\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER (\"${newColumn.name}\" ${this.connection.driver.createFullType(newColumn)} DEFAULT NULL)`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER (\"${oldColumn.name}\" ${this.connection.driver.createFullType(oldColumn)} DEFAULT ${oldColumn.default})`));\n                }\n            }\n\n            await this.executeQueries(upQueries, downQueries);\n            this.replaceCachedTable(table, clonedTable);\n        }\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumns(tableOrName: Table|string, changedColumns: { newColumn: TableColumn, oldColumn: TableColumn }[]): Promise<void> {\n        for (const {oldColumn, newColumn} of changedColumns) {\n            await this.changeColumn(tableOrName, oldColumn, newColumn)\n        }\n    }\n\n    /**\n     * Drops column in the table.\n     */\n    async dropColumn(tableOrName: Table|string, columnOrName: TableColumn|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const parsedTableName = this.driver.parseTableName(table);\n\n        if (!parsedTableName.schema) {\n            parsedTableName.schema = await this.getCurrentSchema();\n        }\n\n        const column = columnOrName instanceof TableColumn ? columnOrName : table.findColumnByName(columnOrName);\n        if (!column)\n            throw new TypeORMError(`Column \"${columnOrName}\" was not found in table \"${table.name}\"`);\n\n        const clonedTable = table.clone();\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        // drop primary key constraint\n        if (column.isPrimary) {\n            // SAP HANA does not allow to drop PK's which is referenced by foreign keys.\n            // To avoid this, we must drop all referential foreign keys and recreate them later\n            const referencedForeignKeySql = `SELECT * FROM \"SYS\".\"REFERENTIAL_CONSTRAINTS\" WHERE \"REFERENCED_SCHEMA_NAME\" = '${parsedTableName.schema}' AND \"REFERENCED_TABLE_NAME\" = '${parsedTableName.tableName}'`;\n            const dbForeignKeys: ObjectLiteral[] = await this.query(referencedForeignKeySql);\n            let referencedForeignKeys: TableForeignKey[] = [];\n            const referencedForeignKeyTableMapping: { tableName: string, fkName: string }[] = [];\n            if (dbForeignKeys.length > 0) {\n                referencedForeignKeys = dbForeignKeys.map(dbForeignKey => {\n                    const foreignKeys = dbForeignKeys.filter(dbFk => dbFk[\"CONSTRAINT_NAME\"] === dbForeignKey[\"CONSTRAINT_NAME\"]);\n\n                    referencedForeignKeyTableMapping.push({ tableName: `${dbForeignKey[\"SCHEMA_NAME\"]}.${dbForeignKey[\"TABLE_NAME\"]}`, fkName: dbForeignKey[\"CONSTRAINT_NAME\"] });\n                    return new TableForeignKey({\n                        name: dbForeignKey[\"CONSTRAINT_NAME\"],\n                        columnNames: foreignKeys.map(dbFk => dbFk[\"COLUMN_NAME\"]),\n                        referencedDatabase: table.database,\n                        referencedSchema: table.schema,\n                        referencedTableName: table.name,\n                        referencedColumnNames: foreignKeys.map(dbFk => dbFk[\"REFERENCED_COLUMN_NAME\"]),\n                        onDelete: dbForeignKey[\"DELETE_RULE\"] === \"RESTRICT\" ? \"NO ACTION\" : dbForeignKey[\"DELETE_RULE\"],\n                        onUpdate: dbForeignKey[\"UPDATE_RULE\"] === \"RESTRICT\" ? \"NO ACTION\" : dbForeignKey[\"UPDATE_RULE\"],\n                    });\n                });\n\n                // drop referenced foreign keys\n                referencedForeignKeys.forEach(foreignKey => {\n                    const mapping = referencedForeignKeyTableMapping.find(it => it.fkName === foreignKey.name);\n                    upQueries.push(this.dropForeignKeySql(mapping!.tableName, foreignKey));\n                    downQueries.push(this.createForeignKeySql(mapping!.tableName, foreignKey));\n                });\n            }\n\n            const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable, clonedTable.primaryColumns.map(column => column.name));\n            const columnNames = clonedTable.primaryColumns.map(primaryColumn => `\"${primaryColumn.name}\"`).join(\", \");\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} DROP CONSTRAINT \"${pkName}\"`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n\n            // update column in table\n            const tableColumn = clonedTable.findColumnByName(column.name);\n            tableColumn!.isPrimary = false;\n\n            // if primary key have multiple columns, we must recreate it without dropped column\n            if (clonedTable.primaryColumns.length > 0) {\n                const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable, clonedTable.primaryColumns.map(column => column.name));\n                const columnNames = clonedTable.primaryColumns.map(primaryColumn => `\"${primaryColumn.name}\"`).join(\", \");\n                upQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n                downQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} DROP CONSTRAINT \"${pkName}\"`));\n            }\n\n            // restore referenced foreign keys\n            referencedForeignKeys.forEach(foreignKey => {\n                const mapping = referencedForeignKeyTableMapping.find(it => it.fkName === foreignKey.name);\n                upQueries.push(this.createForeignKeySql(mapping!.tableName, foreignKey));\n                downQueries.push(this.dropForeignKeySql(mapping!.tableName, foreignKey));\n            });\n        }\n\n        // drop column index\n        const columnIndex = clonedTable.indices.find(index => index.columnNames.length === 1 && index.columnNames[0] === column.name);\n        if (columnIndex) {\n            clonedTable.indices.splice(clonedTable.indices.indexOf(columnIndex), 1);\n            upQueries.push(this.dropIndexSql(table, columnIndex));\n            downQueries.push(this.createIndexSql(table, columnIndex));\n\n        } else if (column.isUnique) {\n            // we splice constraints both from table uniques and indices.\n            const uniqueName = this.connection.namingStrategy.uniqueConstraintName(table, [column.name]);\n            const foundUnique = clonedTable.uniques.find(unique => unique.name === uniqueName);\n            if (foundUnique) {\n                clonedTable.uniques.splice(clonedTable.uniques.indexOf(foundUnique), 1);\n                upQueries.push(this.dropIndexSql(table, uniqueName));\n                downQueries.push(new Query(`CREATE UNIQUE INDEX \"${uniqueName}\" ON ${this.escapePath(table)} (\"${column.name}\")`));\n            }\n\n            const indexName = this.connection.namingStrategy.indexName(table, [column.name]);\n            const foundIndex = clonedTable.indices.find(index => index.name === indexName);\n            if (foundIndex) {\n                clonedTable.indices.splice(clonedTable.indices.indexOf(foundIndex), 1);\n                upQueries.push(this.dropIndexSql(table, indexName));\n                downQueries.push(new Query(`CREATE UNIQUE INDEX \"${indexName}\" ON ${this.escapePath(table)} (\"${column.name}\")`));\n            }\n        }\n\n        // drop column check\n        const columnCheck = clonedTable.checks.find(check => !!check.columnNames && check.columnNames.length === 1 && check.columnNames[0] === column.name);\n        if (columnCheck) {\n            clonedTable.checks.splice(clonedTable.checks.indexOf(columnCheck), 1);\n            upQueries.push(this.dropCheckConstraintSql(table, columnCheck));\n            downQueries.push(this.createCheckConstraintSql(table, columnCheck));\n        }\n\n        upQueries.push(new Query(this.dropColumnSql(table, column)));\n        downQueries.push(new Query(this.addColumnSql(table, column)));\n\n        await this.executeQueries(upQueries, downQueries);\n\n        clonedTable.removeColumn(column);\n        this.replaceCachedTable(table, clonedTable);\n    }\n\n    /**\n     * Drops the columns in the table.\n     */\n    async dropColumns(tableOrName: Table|string, columns: TableColumn[]|string[]): Promise<void> {\n        for (const column of columns) {\n            await this.dropColumn(tableOrName, column);\n        }\n    }\n\n    /**\n     * Creates a new primary key.\n     */\n    async createPrimaryKey(tableOrName: Table|string, columnNames: string[]): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const clonedTable = table.clone();\n\n        const up = this.createPrimaryKeySql(table, columnNames);\n\n        // mark columns as primary, because dropPrimaryKeySql build constraint name from table primary column names.\n        clonedTable.columns.forEach(column => {\n            if (columnNames.find(columnName => columnName === column.name))\n                column.isPrimary = true;\n        });\n        const down = this.dropPrimaryKeySql(clonedTable);\n\n        await this.executeQueries(up, down);\n        this.replaceCachedTable(table, clonedTable);\n    }\n\n    /**\n     * Updates composite primary keys.\n     */\n    async updatePrimaryKeys(tableOrName: Table|string, columns: TableColumn[]): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const parsedTableName = this.driver.parseTableName(table);\n\n        if (!parsedTableName.schema) {\n            parsedTableName.schema = await this.getCurrentSchema();\n        }\n\n        const clonedTable = table.clone();\n        const columnNames = columns.map(column => column.name);\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        // SAP HANA does not allow to drop PK's which is referenced by foreign keys.\n        // To avoid this, we must drop all referential foreign keys and recreate them later\n        const referencedForeignKeySql = `SELECT * FROM \"SYS\".\"REFERENTIAL_CONSTRAINTS\" WHERE \"REFERENCED_SCHEMA_NAME\" = '${parsedTableName.schema}' AND \"REFERENCED_TABLE_NAME\" = '${parsedTableName.tableName}'`;\n        const dbForeignKeys: ObjectLiteral[] = await this.query(referencedForeignKeySql);\n        let referencedForeignKeys: TableForeignKey[] = [];\n        const referencedForeignKeyTableMapping: { tableName: string, fkName: string }[] = [];\n        if (dbForeignKeys.length > 0) {\n            referencedForeignKeys = dbForeignKeys.map(dbForeignKey => {\n                const foreignKeys = dbForeignKeys.filter(dbFk => dbFk[\"CONSTRAINT_NAME\"] === dbForeignKey[\"CONSTRAINT_NAME\"]);\n\n                referencedForeignKeyTableMapping.push({ tableName: `${dbForeignKey[\"SCHEMA_NAME\"]}.${dbForeignKey[\"TABLE_NAME\"]}`, fkName: dbForeignKey[\"CONSTRAINT_NAME\"] });\n                return new TableForeignKey({\n                    name: dbForeignKey[\"CONSTRAINT_NAME\"],\n                    columnNames: foreignKeys.map(dbFk => dbFk[\"COLUMN_NAME\"]),\n                    referencedDatabase: table.database,\n                    referencedSchema: table.schema,\n                    referencedTableName: table.name,\n                    referencedColumnNames: foreignKeys.map(dbFk => dbFk[\"REFERENCED_COLUMN_NAME\"]),\n                    onDelete: dbForeignKey[\"DELETE_RULE\"] === \"RESTRICT\" ? \"NO ACTION\" : dbForeignKey[\"DELETE_RULE\"],\n                    onUpdate: dbForeignKey[\"UPDATE_RULE\"] === \"RESTRICT\" ? \"NO ACTION\" : dbForeignKey[\"UPDATE_RULE\"],\n                });\n            });\n\n            // drop referenced foreign keys\n            referencedForeignKeys.forEach(foreignKey => {\n                const mapping = referencedForeignKeyTableMapping.find(it => it.fkName === foreignKey.name);\n                upQueries.push(this.dropForeignKeySql(mapping!.tableName, foreignKey));\n                downQueries.push(this.createForeignKeySql(mapping!.tableName, foreignKey));\n            });\n        }\n\n        // if table already have primary columns, we must drop them.\n        const primaryColumns = clonedTable.primaryColumns;\n        if (primaryColumns.length > 0) {\n            const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable, primaryColumns.map(column => column.name));\n            const columnNamesString = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNamesString})`));\n        }\n\n        // update columns in table.\n        clonedTable.columns\n            .filter(column => columnNames.indexOf(column.name) !== -1)\n            .forEach(column => column.isPrimary = true);\n\n        const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable, columnNames);\n        const columnNamesString = columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNamesString})`));\n        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n\n        // restore referenced foreign keys\n        referencedForeignKeys.forEach(foreignKey => {\n            const mapping = referencedForeignKeyTableMapping.find(it => it.fkName === foreignKey.name);\n            upQueries.push(this.createForeignKeySql(mapping!.tableName, foreignKey));\n            downQueries.push(this.dropForeignKeySql(mapping!.tableName, foreignKey));\n        });\n\n        await this.executeQueries(upQueries, downQueries);\n        this.replaceCachedTable(table, clonedTable);\n    }\n\n    /**\n     * Drops a primary key.\n     */\n    async dropPrimaryKey(tableOrName: Table|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const parsedTableName = this.driver.parseTableName(table);\n\n        if (!parsedTableName.schema) {\n            parsedTableName.schema = await this.getCurrentSchema();\n        }\n\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        // SAP HANA does not allow to drop PK's which is referenced by foreign keys.\n        // To avoid this, we must drop all referential foreign keys and recreate them later\n        const referencedForeignKeySql = `SELECT * FROM \"SYS\".\"REFERENTIAL_CONSTRAINTS\" WHERE \"REFERENCED_SCHEMA_NAME\" = '${parsedTableName.schema}' AND \"REFERENCED_TABLE_NAME\" = '${parsedTableName.tableName}'`;\n        const dbForeignKeys: ObjectLiteral[] = await this.query(referencedForeignKeySql);\n        let referencedForeignKeys: TableForeignKey[] = [];\n        const referencedForeignKeyTableMapping: { tableName: string, fkName: string }[] = [];\n        if (dbForeignKeys.length > 0) {\n            referencedForeignKeys = dbForeignKeys.map(dbForeignKey => {\n                const foreignKeys = dbForeignKeys.filter(dbFk => dbFk[\"CONSTRAINT_NAME\"] === dbForeignKey[\"CONSTRAINT_NAME\"]);\n\n                referencedForeignKeyTableMapping.push({ tableName: `${dbForeignKey[\"SCHEMA_NAME\"]}.${dbForeignKey[\"TABLE_NAME\"]}`, fkName: dbForeignKey[\"CONSTRAINT_NAME\"] });\n                return new TableForeignKey({\n                    name: dbForeignKey[\"CONSTRAINT_NAME\"],\n                    columnNames: foreignKeys.map(dbFk => dbFk[\"COLUMN_NAME\"]),\n                    referencedDatabase: table.database,\n                    referencedSchema: table.schema,\n                    referencedTableName: table.name,\n                    referencedColumnNames: foreignKeys.map(dbFk => dbFk[\"REFERENCED_COLUMN_NAME\"]),\n                    onDelete: dbForeignKey[\"DELETE_RULE\"] === \"RESTRICT\" ? \"NO ACTION\" : dbForeignKey[\"DELETE_RULE\"],\n                    onUpdate: dbForeignKey[\"UPDATE_RULE\"] === \"RESTRICT\" ? \"NO ACTION\" : dbForeignKey[\"UPDATE_RULE\"],\n                });\n            });\n\n            // drop referenced foreign keys\n            referencedForeignKeys.forEach(foreignKey => {\n                const mapping = referencedForeignKeyTableMapping.find(it => it.fkName === foreignKey.name);\n                upQueries.push(this.dropForeignKeySql(mapping!.tableName, foreignKey));\n                downQueries.push(this.createForeignKeySql(mapping!.tableName, foreignKey));\n            });\n        }\n\n        upQueries.push(this.dropPrimaryKeySql(table));\n        downQueries.push(this.createPrimaryKeySql(table, table.primaryColumns.map(column => column.name)));\n\n        // restore referenced foreign keys\n        referencedForeignKeys.forEach(foreignKey => {\n            const mapping = referencedForeignKeyTableMapping.find(it => it.fkName === foreignKey.name);\n            upQueries.push(this.createForeignKeySql(mapping!.tableName, foreignKey));\n            downQueries.push(this.dropForeignKeySql(mapping!.tableName, foreignKey));\n        });\n\n        await this.executeQueries(upQueries, downQueries);\n        table.primaryColumns.forEach(column => {\n            column.isPrimary = false;\n        });\n    }\n\n    /**\n     * Creates a new unique constraint.\n     */\n    async createUniqueConstraint(tableOrName: Table|string, uniqueConstraint: TableUnique): Promise<void> {\n        throw new TypeORMError(`SAP HANA does not support unique constraints. Use unique index instead.`);\n    }\n\n    /**\n     * Creates a new unique constraints.\n     */\n    async createUniqueConstraints(tableOrName: Table|string, uniqueConstraints: TableUnique[]): Promise<void> {\n        throw new TypeORMError(`SAP HANA does not support unique constraints. Use unique index instead.`);\n    }\n\n    /**\n     * Drops unique constraint.\n     */\n    async dropUniqueConstraint(tableOrName: Table|string, uniqueOrName: TableUnique|string): Promise<void> {\n        throw new TypeORMError(`SAP HANA does not support unique constraints. Use unique index instead.`);\n    }\n\n    /**\n     * Drops an unique constraints.\n     */\n    async dropUniqueConstraints(tableOrName: Table|string, uniqueConstraints: TableUnique[]): Promise<void> {\n        throw new TypeORMError(`SAP HANA does not support unique constraints. Use unique index instead.`);\n    }\n\n    /**\n     * Creates a new check constraint.\n     */\n    async createCheckConstraint(tableOrName: Table|string, checkConstraint: TableCheck): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n\n        // new unique constraint may be passed without name. In this case we generate unique name manually.\n        if (!checkConstraint.name)\n            checkConstraint.name = this.connection.namingStrategy.checkConstraintName(table, checkConstraint.expression!);\n\n        const up = this.createCheckConstraintSql(table, checkConstraint);\n        const down = this.dropCheckConstraintSql(table, checkConstraint);\n        await this.executeQueries(up, down);\n        table.addCheckConstraint(checkConstraint);\n    }\n\n    /**\n     * Creates a new check constraints.\n     */\n    async createCheckConstraints(tableOrName: Table|string, checkConstraints: TableCheck[]): Promise<void> {\n        const promises = checkConstraints.map(checkConstraint => this.createCheckConstraint(tableOrName, checkConstraint));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Drops check constraint.\n     */\n    async dropCheckConstraint(tableOrName: Table|string, checkOrName: TableCheck|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const checkConstraint = checkOrName instanceof TableCheck ? checkOrName : table.checks.find(c => c.name === checkOrName);\n        if (!checkConstraint)\n            throw new TypeORMError(`Supplied check constraint was not found in table ${table.name}`);\n\n        const up = this.dropCheckConstraintSql(table, checkConstraint);\n        const down = this.createCheckConstraintSql(table, checkConstraint);\n        await this.executeQueries(up, down);\n        table.removeCheckConstraint(checkConstraint);\n    }\n\n    /**\n     * Drops check constraints.\n     */\n    async dropCheckConstraints(tableOrName: Table|string, checkConstraints: TableCheck[]): Promise<void> {\n        const promises = checkConstraints.map(checkConstraint => this.dropCheckConstraint(tableOrName, checkConstraint));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Creates a new exclusion constraint.\n     */\n    async createExclusionConstraint(tableOrName: Table|string, exclusionConstraint: TableExclusion): Promise<void> {\n        throw new TypeORMError(`SAP HANA does not support exclusion constraints.`);\n    }\n\n    /**\n     * Creates a new exclusion constraints.\n     */\n    async createExclusionConstraints(tableOrName: Table|string, exclusionConstraints: TableExclusion[]): Promise<void> {\n        throw new TypeORMError(`SAP HANA does not support exclusion constraints.`);\n    }\n\n    /**\n     * Drops exclusion constraint.\n     */\n    async dropExclusionConstraint(tableOrName: Table|string, exclusionOrName: TableExclusion|string): Promise<void> {\n        throw new TypeORMError(`SAP HANA does not support exclusion constraints.`);\n    }\n\n    /**\n     * Drops exclusion constraints.\n     */\n    async dropExclusionConstraints(tableOrName: Table|string, exclusionConstraints: TableExclusion[]): Promise<void> {\n        throw new TypeORMError(`SAP HANA does not support exclusion constraints.`);\n    }\n\n    /**\n     * Creates a new foreign key.\n     */\n    async createForeignKey(tableOrName: Table|string, foreignKey: TableForeignKey): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n\n        // new FK may be passed without name. In this case we generate FK name manually.\n        if (!foreignKey.name)\n            foreignKey.name = this.connection.namingStrategy.foreignKeyName(table, foreignKey.columnNames, this.getTablePath(foreignKey), foreignKey.referencedColumnNames);\n\n        const up = this.createForeignKeySql(table, foreignKey);\n        const down = this.dropForeignKeySql(table, foreignKey);\n        await this.executeQueries(up, down);\n        table.addForeignKey(foreignKey);\n    }\n\n    /**\n     * Creates a new foreign keys.\n     */\n    async createForeignKeys(tableOrName: Table|string, foreignKeys: TableForeignKey[]): Promise<void> {\n        const promises = foreignKeys.map(foreignKey => this.createForeignKey(tableOrName, foreignKey));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Drops a foreign key from the table.\n     */\n    async dropForeignKey(tableOrName: Table|string, foreignKeyOrName: TableForeignKey|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const foreignKey = foreignKeyOrName instanceof TableForeignKey ? foreignKeyOrName : table.foreignKeys.find(fk => fk.name === foreignKeyOrName);\n        if (!foreignKey)\n            throw new TypeORMError(`Supplied foreign key was not found in table ${table.name}`);\n\n        const up = this.dropForeignKeySql(table, foreignKey);\n        const down = this.createForeignKeySql(table, foreignKey);\n        await this.executeQueries(up, down);\n        table.removeForeignKey(foreignKey);\n    }\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    async dropForeignKeys(tableOrName: Table|string, foreignKeys: TableForeignKey[]): Promise<void> {\n        const promises = foreignKeys.map(foreignKey => this.dropForeignKey(tableOrName, foreignKey));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Creates a new index.\n     */\n    async createIndex(tableOrName: Table|string, index: TableIndex): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n\n        // new index may be passed without name. In this case we generate index name manually.\n        if (!index.name)\n            index.name = this.connection.namingStrategy.indexName(table, index.columnNames, index.where);\n\n        const up = this.createIndexSql(table, index);\n        const down = this.dropIndexSql(table, index);\n        await this.executeQueries(up, down);\n        table.addIndex(index);\n    }\n\n    /**\n     * Creates a new indices\n     */\n    async createIndices(tableOrName: Table|string, indices: TableIndex[]): Promise<void> {\n        const promises = indices.map(index => this.createIndex(tableOrName, index));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Drops an index.\n     */\n    async dropIndex(tableOrName: Table|string, indexOrName: TableIndex|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const index = indexOrName instanceof TableIndex ? indexOrName : table.indices.find(i => i.name === indexOrName);\n        if (!index)\n            throw new TypeORMError(`Supplied index was not found in table ${table.name}`);\n\n        const up = this.dropIndexSql(table, index);\n        const down = this.createIndexSql(table, index);\n        await this.executeQueries(up, down);\n        table.removeIndex(index);\n    }\n\n    /**\n     * Drops an indices from the table.\n     */\n    async dropIndices(tableOrName: Table|string, indices: TableIndex[]): Promise<void> {\n        const promises = indices.map(index => this.dropIndex(tableOrName, index));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Clears all table contents.\n     * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.\n     */\n    async clearTable(tablePath: string): Promise<void> {\n        await this.query(`TRUNCATE TABLE ${this.escapePath(tablePath)}`);\n    }\n\n    /**\n     * Removes all tables from the currently connected database.\n     */\n    async clearDatabase(): Promise<void> {\n        const schemas: string[] = [];\n        this.connection.entityMetadatas\n            .filter(metadata => metadata.schema)\n            .forEach(metadata => {\n                const isSchemaExist = !!schemas.find(schema => schema === metadata.schema);\n                if (!isSchemaExist)\n                    schemas.push(metadata.schema!);\n            });\n\n        schemas.push(this.driver.options.schema || \"current_schema\");\n        const schemaNamesString = schemas.map(name => {\n            return name === \"current_schema\" ? name : \"'\" + name + \"'\";\n        }).join(\", \");\n\n        await this.startTransaction();\n        try {\n            // const selectViewDropsQuery = `SELECT 'DROP VIEW IF EXISTS \"' || schemaname || '\".\"' || viewname || '\" CASCADE;' as \"query\" ` +\n            //     `FROM \"pg_views\" WHERE \"schemaname\" IN (${schemaNamesString}) AND \"viewname\" NOT IN ('geography_columns', 'geometry_columns', 'raster_columns', 'raster_overviews')`;\n            // const dropViewQueries: ObjectLiteral[] = await this.query(selectViewDropsQuery);\n            // await Promise.all(dropViewQueries.map(q => this.query(q[\"query\"])));\n\n            // ignore spatial_ref_sys; it's a special table supporting PostGIS\n            const selectTableDropsQuery = `SELECT 'DROP TABLE \"' || schema_name || '\".\"' || table_name || '\" CASCADE;' as \"query\" FROM \"SYS\".\"TABLES\" WHERE \"SCHEMA_NAME\" IN (${schemaNamesString}) AND \"TABLE_NAME\" NOT IN ('SYS_AFL_GENERATOR_PARAMETERS') AND \"IS_COLUMN_TABLE\" = 'TRUE'`;\n            const dropTableQueries: ObjectLiteral[] = await this.query(selectTableDropsQuery);\n            await Promise.all(dropTableQueries.map(q => this.query(q[\"query\"])));\n\n            await this.commitTransaction();\n\n        } catch (error) {\n            try { // we throw original error even if rollback thrown an error\n                await this.rollbackTransaction();\n            } catch (rollbackError) { }\n            throw error;\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    protected async loadViews(viewNames?: string[]): Promise<View[]> {\n        const hasTable = await this.hasTable(this.getTypeormMetadataTableName());\n        if (!hasTable) {\n            return [];\n        }\n\n        if (!viewNames) {\n            viewNames = [];\n        }\n\n        const currentDatabase = await this.getCurrentDatabase();\n        const currentSchema = await this.getCurrentSchema();\n\n        const viewsCondition = viewNames.map(viewName => {\n            let { schema, tableName: name } = this.driver.parseTableName(viewName);\n\n            if (!schema) {\n                schema = currentSchema;\n            }\n\n            return `(\"t\".\"schema\" = '${schema}' AND \"t\".\"name\" = '${name}')`;\n        }).join(\" OR \");\n\n        const query = `SELECT \"t\".* FROM ${this.escapePath(this.getTypeormMetadataTableName())} \"t\" WHERE \"t\".\"type\" = '${MetadataTableType.VIEW}' ${viewsCondition ? `AND (${viewsCondition})` : \"\"}`;\n        const dbViews = await this.query(query);\n        return dbViews.map((dbView: any) => {\n            const view = new View();\n            const schema = dbView[\"schema\"] === currentSchema && !this.driver.options.schema ? undefined : dbView[\"schema\"];\n            view.database = currentDatabase;\n            view.schema = dbView[\"schema\"];\n            view.name = this.driver.buildTableName(dbView[\"name\"], schema);\n            view.expression = dbView[\"value\"];\n            return view;\n        });\n    }\n\n    /**\n     * Loads all tables (with given names) from the database and creates a Table from them.\n     */\n    protected async loadTables(tableNames?: string[]): Promise<Table[]> {\n        if (tableNames && tableNames.length === 0) {\n            return [];\n        }\n\n        const currentSchema = await this.getCurrentSchema();\n        const currentDatabase = await this.getCurrentDatabase();\n\n        const dbTables: { SCHEMA_NAME: string, TABLE_NAME: string }[] = [];\n\n        if (!tableNames) {\n            const tablesSql = `SELECT \"SCHEMA_NAME\", \"TABLE_NAME\" FROM \"SYS\".\"TABLES\"`;\n\n            dbTables.push(...await this.query(tablesSql));\n        } else {\n            const tablesCondition = tableNames.map(tableName => {\n                let [schema, name] = tableName.split(\".\");\n                if (!name) {\n                    name = schema;\n                    schema = this.driver.options.schema || currentSchema;\n                }\n                return `(\"SCHEMA_NAME\" = '${schema}' AND \"TABLE_NAME\" = '${name}')`;\n            }).join(\" OR \");\n\n            const tablesSql = `SELECT \"SCHEMA_NAME\", \"TABLE_NAME\" FROM \"SYS\".\"TABLES\" WHERE ` + tablesCondition;\n\n            dbTables.push(...await this.query(tablesSql));\n        }\n\n        // if tables were not found in the db, no need to proceed\n        if (dbTables.length === 0)\n            return [];\n\n        const columnsCondition = dbTables.map(({ SCHEMA_NAME, TABLE_NAME }) => {\n            return `(\"SCHEMA_NAME\" = '${SCHEMA_NAME}' AND \"TABLE_NAME\" = '${TABLE_NAME}')`;\n        }).join(\" OR \");\n        const columnsSql = `SELECT * FROM \"SYS\".\"TABLE_COLUMNS\" WHERE ` + columnsCondition + ` ORDER BY \"POSITION\"`;\n\n        const constraintsCondition = dbTables.map(({ SCHEMA_NAME, TABLE_NAME }) => {\n            return `(\"SCHEMA_NAME\" = '${SCHEMA_NAME}' AND \"TABLE_NAME\" = '${TABLE_NAME}')`;\n        }).join(\" OR \");\n        const constraintsSql = `SELECT * FROM \"SYS\".\"CONSTRAINTS\" WHERE (${constraintsCondition}) ORDER BY \"POSITION\"`;\n\n        const indicesCondition = dbTables.map(({ SCHEMA_NAME, TABLE_NAME }) => {\n            return `(\"I\".\"SCHEMA_NAME\" = '${SCHEMA_NAME}' AND \"I\".\"TABLE_NAME\" = '${TABLE_NAME}')`;\n        }).join(\" OR \");\n        // excluding primary key and autogenerated fulltext indices\n        const indicesSql = `SELECT \"I\".\"INDEX_TYPE\", \"I\".\"SCHEMA_NAME\", \"I\".\"TABLE_NAME\", \"I\".\"INDEX_NAME\", \"IC\".\"COLUMN_NAME\", \"I\".\"CONSTRAINT\" ` +\n            `FROM \"SYS\".\"INDEXES\" \"I\" INNER JOIN \"SYS\".\"INDEX_COLUMNS\" \"IC\" ON \"IC\".\"INDEX_OID\" = \"I\".\"INDEX_OID\" ` +\n            `WHERE (${indicesCondition}) AND (\"I\".\"CONSTRAINT\" IS NULL OR \"I\".\"CONSTRAINT\" != 'PRIMARY KEY') AND \"I\".\"INDEX_NAME\" NOT LIKE '%_SYS_FULLTEXT_%' ORDER BY \"IC\".\"POSITION\"`;\n\n        const foreignKeysCondition = dbTables.map(({ SCHEMA_NAME, TABLE_NAME }) => {\n            return `(\"SCHEMA_NAME\" = '${SCHEMA_NAME}' AND \"TABLE_NAME\" = '${TABLE_NAME}')`;\n        }).join(\" OR \");\n        const foreignKeysSql = `SELECT * FROM \"SYS\".\"REFERENTIAL_CONSTRAINTS\" WHERE (${foreignKeysCondition}) ORDER BY \"POSITION\"`;\n        const [dbColumns, dbConstraints, dbIndices, dbForeignKeys]: ObjectLiteral[][] = await Promise.all([\n            this.query(columnsSql),\n            this.query(constraintsSql),\n            this.query(indicesSql),\n            this.query(foreignKeysSql),\n        ]);\n\n        // create tables for loaded tables\n        return Promise.all(dbTables.map(async dbTable => {\n            const table = new Table();\n            const getSchemaFromKey = (dbObject: any, key: string) => {\n                return dbObject[key] === currentSchema && (!this.driver.options.schema || this.driver.options.schema === currentSchema)\n                    ? undefined\n                    : dbObject[key]\n            };\n\n            // We do not need to join schema name, when database is by default.\n            const schema = getSchemaFromKey(dbTable, \"SCHEMA_NAME\");\n            table.database = currentDatabase;\n            table.schema = dbTable[\"SCHEMA_NAME\"];\n            table.name = this.driver.buildTableName(dbTable[\"TABLE_NAME\"], schema);\n\n            // create columns from the loaded columns\n            table.columns = await Promise.all(dbColumns\n                .filter(dbColumn => dbColumn[\"TABLE_NAME\"] === dbTable[\"TABLE_NAME\"] && dbColumn[\"SCHEMA_NAME\"] === dbTable[\"SCHEMA_NAME\"])\n                .map(async dbColumn => {\n\n                    const columnConstraints = dbConstraints.filter(dbConstraint => (\n                        dbConstraint[\"TABLE_NAME\"] === dbColumn[\"TABLE_NAME\"] &&\n                        dbConstraint[\"SCHEMA_NAME\"] === dbColumn[\"SCHEMA_NAME\"] &&\n                        dbConstraint[\"COLUMN_NAME\"] === dbColumn[\"COLUMN_NAME\"]\n                    ));\n\n                    const columnUniqueIndices = dbIndices.filter(dbIndex => {\n                        return dbIndex[\"TABLE_NAME\"] === dbTable[\"TABLE_NAME\"]\n                            && dbIndex[\"SCHEMA_NAME\"] === dbTable[\"SCHEMA_NAME\"]\n                            && dbIndex[\"COLUMN_NAME\"] === dbColumn[\"COLUMN_NAME\"]\n                            && dbIndex[\"CONSTRAINT\"] && dbIndex[\"CONSTRAINT\"].indexOf(\"UNIQUE\") !== -1\n                    })\n\n                    const tableMetadata = this.connection.entityMetadatas.find(metadata => this.getTablePath(table) === this.getTablePath(metadata));\n                    const hasIgnoredIndex = columnUniqueIndices.length > 0\n                        && tableMetadata\n                        && tableMetadata.indices.some(index => {\n                            return columnUniqueIndices.some(uniqueIndex => {\n                                return index.name === uniqueIndex[\"INDEX_NAME\"] && index.synchronize === false;\n                            })\n                        });\n\n                    const isConstraintComposite = columnUniqueIndices.every((uniqueIndex) => {\n                        return dbIndices.some(dbIndex => dbIndex[\"INDEX_NAME\"] === uniqueIndex[\"INDEX_NAME\"] && dbIndex[\"COLUMN_NAME\"] !== dbColumn[\"COLUMN_NAME\"]);\n                    })\n\n                    const tableColumn = new TableColumn();\n                    tableColumn.name = dbColumn[\"COLUMN_NAME\"];\n                    tableColumn.type = dbColumn[\"DATA_TYPE_NAME\"].toLowerCase();\n\n                    if (tableColumn.type === \"dec\" || tableColumn.type === \"decimal\") {\n                        // If one of these properties was set, and another was not, Postgres sets '0' in to unspecified property\n                        // we set 'undefined' in to unspecified property to avoid changing column on sync\n                        if (dbColumn[\"LENGTH\"] !== null && !this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"LENGTH\"])) {\n                            tableColumn.precision = dbColumn[\"LENGTH\"];\n                        } else if (dbColumn[\"SCALE\"] !== null && !this.isDefaultColumnScale(table, tableColumn, dbColumn[\"SCALE\"])) {\n                            tableColumn.precision = undefined;\n                        }\n                        if (dbColumn[\"SCALE\"] !== null && !this.isDefaultColumnScale(table, tableColumn, dbColumn[\"SCALE\"])) {\n                            tableColumn.scale = dbColumn[\"SCALE\"];\n                        } else if (dbColumn[\"LENGTH\"] !== null && !this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"LENGTH\"])) {\n                            tableColumn.scale = undefined;\n                        }\n                    }\n\n                    if (dbColumn[\"DATA_TYPE_NAME\"].toLowerCase() === \"array\") {\n                        tableColumn.isArray = true;\n                        tableColumn.type = dbColumn[\"CS_DATA_TYPE_NAME\"].toLowerCase();\n                    }\n\n                    // check only columns that have length property\n                    if (this.driver.withLengthColumnTypes.indexOf(tableColumn.type as ColumnType) !== -1 && dbColumn[\"LENGTH\"]) {\n                        const length = dbColumn[\"LENGTH\"].toString();\n                        tableColumn.length = !this.isDefaultColumnLength(table, tableColumn, length) ? length : \"\";\n                    }\n                    tableColumn.isUnique = columnUniqueIndices.length > 0 && !hasIgnoredIndex && !isConstraintComposite;\n                    tableColumn.isNullable = dbColumn[\"IS_NULLABLE\"] === \"TRUE\";\n                    tableColumn.isPrimary = !!columnConstraints.find(constraint => constraint[\"IS_PRIMARY_KEY\"] === \"TRUE\");\n                    tableColumn.isGenerated = dbColumn[\"GENERATION_TYPE\"] === \"ALWAYS AS IDENTITY\";\n                    if (tableColumn.isGenerated)\n                        tableColumn.generationStrategy = \"increment\";\n\n                    if (dbColumn[\"DEFAULT_VALUE\"] === null\n                        || dbColumn[\"DEFAULT_VALUE\"] === undefined) {\n                        tableColumn.default = undefined;\n\n                    } else {\n                        if (tableColumn.type === \"char\" || tableColumn.type === \"nchar\" || tableColumn.type === \"varchar\" ||\n                            tableColumn.type === \"nvarchar\" || tableColumn.type === \"alphanum\" || tableColumn.type === \"shorttext\") {\n                            tableColumn.default = `'${dbColumn[\"DEFAULT_VALUE\"]}'`;\n                        } else if (tableColumn.type === \"boolean\") {\n                            tableColumn.default = dbColumn[\"DEFAULT_VALUE\"] === \"1\" ? \"true\" : \"false\";\n                        } else {\n                            tableColumn.default = dbColumn[\"DEFAULT_VALUE\"];\n                        }\n                    }\n                    tableColumn.comment = \"\"; // dbColumn[\"COLUMN_COMMENT\"];\n                    if (dbColumn[\"character_set_name\"])\n                        tableColumn.charset = dbColumn[\"character_set_name\"];\n                    if (dbColumn[\"collation_name\"])\n                        tableColumn.collation = dbColumn[\"collation_name\"];\n                    return tableColumn;\n                }));\n\n            // find check constraints of table, group them by constraint name and build TableCheck.\n            const tableCheckConstraints = OrmUtils.uniq(dbConstraints.filter(dbConstraint => (\n                dbConstraint[\"TABLE_NAME\"] === dbTable[\"TABLE_NAME\"] &&\n                dbConstraint[\"SCHEMA_NAME\"] === dbTable[\"SCHEMA_NAME\"] &&\n                dbConstraint[\"CHECK_CONDITION\"] !== null &&\n                dbConstraint[\"CHECK_CONDITION\"] !== undefined\n            )), dbConstraint => dbConstraint[\"CONSTRAINT_NAME\"]);\n\n            table.checks = tableCheckConstraints.map(constraint => {\n                const checks = dbConstraints.filter(dbC => dbC[\"CONSTRAINT_NAME\"] === constraint[\"CONSTRAINT_NAME\"]);\n                return new TableCheck({\n                    name: constraint[\"CONSTRAINT_NAME\"],\n                    columnNames: checks.map(c => c[\"COLUMN_NAME\"]),\n                    expression: constraint[\"CHECK_CONDITION\"],\n                });\n            });\n\n            // find foreign key constraints of table, group them by constraint name and build TableForeignKey.\n            const tableForeignKeyConstraints = OrmUtils.uniq(dbForeignKeys.filter(dbForeignKey => (\n                dbForeignKey[\"TABLE_NAME\"] === dbTable[\"TABLE_NAME\"] &&\n                dbForeignKey[\"SCHEMA_NAME\"] === dbTable[\"SCHEMA_NAME\"]\n            )), dbForeignKey => dbForeignKey[\"CONSTRAINT_NAME\"]);\n\n            table.foreignKeys = tableForeignKeyConstraints.map(dbForeignKey => {\n                const foreignKeys = dbForeignKeys.filter(dbFk => dbFk[\"CONSTRAINT_NAME\"] === dbForeignKey[\"CONSTRAINT_NAME\"]);\n\n                // if referenced table located in currently used schema, we don't need to concat schema name to table name.\n                const schema = getSchemaFromKey(dbForeignKey, \"REFERENCED_SCHEMA_NAME\");\n                const referencedTableName = this.driver.buildTableName(dbForeignKey[\"REFERENCED_TABLE_NAME\"], schema);\n\n                return new TableForeignKey({\n                    name: dbForeignKey[\"CONSTRAINT_NAME\"],\n                    columnNames: foreignKeys.map(dbFk => dbFk[\"COLUMN_NAME\"]),\n                    referencedDatabase: table.database,\n                    referencedSchema: dbForeignKey[\"REFERENCED_SCHEMA_NAME\"],\n                    referencedTableName: referencedTableName,\n                    referencedColumnNames: foreignKeys.map(dbFk => dbFk[\"REFERENCED_COLUMN_NAME\"]),\n                    onDelete: dbForeignKey[\"DELETE_RULE\"] === \"RESTRICT\" ? \"NO ACTION\" : dbForeignKey[\"DELETE_RULE\"],\n                    onUpdate: dbForeignKey[\"UPDATE_RULE\"] === \"RESTRICT\" ? \"NO ACTION\" : dbForeignKey[\"UPDATE_RULE\"],\n                });\n            });\n\n            // find index constraints of table, group them by constraint name and build TableIndex.\n            const tableIndexConstraints = OrmUtils.uniq(dbIndices.filter(dbIndex => (\n                dbIndex[\"TABLE_NAME\"] === dbTable[\"TABLE_NAME\"] &&\n                dbIndex[\"SCHEMA_NAME\"] === dbTable[\"SCHEMA_NAME\"]\n            )), dbIndex => dbIndex[\"INDEX_NAME\"]);\n\n            table.indices = tableIndexConstraints.map(constraint => {\n                const indices = dbIndices.filter(index => {\n                    return index[\"SCHEMA_NAME\"] === constraint[\"SCHEMA_NAME\"]\n                        && index[\"TABLE_NAME\"] === constraint[\"TABLE_NAME\"]\n                        && index[\"INDEX_NAME\"] === constraint[\"INDEX_NAME\"];\n                });\n                return new TableIndex(<TableIndexOptions>{\n                    table: table,\n                    name: constraint[\"INDEX_NAME\"],\n                    columnNames: indices.map(i => i[\"COLUMN_NAME\"]),\n                    isUnique: constraint[\"CONSTRAINT\"] && constraint[\"CONSTRAINT\"].indexOf(\"UNIQUE\") !== -1,\n                    isFulltext: constraint[\"INDEX_TYPE\"] === \"FULLTEXT\"\n                });\n            });\n\n            return table;\n        }));\n    }\n\n    /**\n     * Builds and returns SQL for create table.\n     */\n    protected createTableSql(table: Table, createForeignKeys?: boolean): Query {\n        const columnDefinitions = table.columns.map(column => this.buildCreateColumnSql(column)).join(\", \");\n        let sql = `CREATE TABLE ${this.escapePath(table)} (${columnDefinitions}`;\n\n        // we create unique indexes instead of unique constraints, because SAP HANA does not have unique constraints.\n        // if we mark column as Unique, it means that we create UNIQUE INDEX.\n        table.columns\n            .filter(column => column.isUnique)\n            .forEach(column => {\n                const isUniqueIndexExist = table.indices.some(index => {\n                    return index.columnNames.length === 1 && !!index.isUnique && index.columnNames.indexOf(column.name) !== -1;\n                });\n                const isUniqueConstraintExist = table.uniques.some(unique => {\n                    return unique.columnNames.length === 1 && unique.columnNames.indexOf(column.name) !== -1;\n                });\n                if (!isUniqueIndexExist && !isUniqueConstraintExist)\n                    table.indices.push(new TableIndex({\n                        name: this.connection.namingStrategy.uniqueConstraintName(table, [column.name]),\n                        columnNames: [column.name],\n                        isUnique: true\n                    }));\n            });\n\n        // as SAP HANA does not have unique constraints, we must create table indices from table uniques and mark them as unique.\n        if (table.uniques.length > 0) {\n            table.uniques.forEach(unique => {\n                const uniqueExist = table.indices.some(index => index.name === unique.name);\n                if (!uniqueExist) {\n                    table.indices.push(new TableIndex({\n                        name: unique.name,\n                        columnNames: unique.columnNames,\n                        isUnique: true\n                    }));\n                }\n            });\n        }\n\n        if (table.checks.length > 0) {\n            const checksSql = table.checks.map(check => {\n                const checkName = check.name ? check.name : this.connection.namingStrategy.checkConstraintName(table, check.expression!);\n                return `CONSTRAINT \"${checkName}\" CHECK (${check.expression})`;\n            }).join(\", \");\n\n            sql += `, ${checksSql}`;\n        }\n\n        if (table.foreignKeys.length > 0 && createForeignKeys) {\n            const foreignKeysSql = table.foreignKeys.map(fk => {\n                const columnNames = fk.columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n                if (!fk.name)\n                    fk.name = this.connection.namingStrategy.foreignKeyName(table, fk.columnNames, this.getTablePath(fk), fk.referencedColumnNames);\n                const referencedColumnNames = fk.referencedColumnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n\n                let constraint = `CONSTRAINT \"${fk.name}\" FOREIGN KEY (${columnNames}) REFERENCES ${this.escapePath(this.getTablePath(fk))} (${referencedColumnNames})`;\n                // SAP HANA does not have \"NO ACTION\" option for FK's\n                if (fk.onDelete) {\n                    const onDelete = fk.onDelete === \"NO ACTION\" ? \"RESTRICT\" : fk.onDelete;\n                    constraint += ` ON DELETE ${onDelete}`;\n                }\n                if (fk.onUpdate) {\n                    const onUpdate = fk.onUpdate === \"NO ACTION\" ? \"RESTRICT\" : fk.onUpdate;\n                    constraint += ` ON UPDATE ${onUpdate}`;\n                }\n\n                return constraint;\n            }).join(\", \");\n\n            sql += `, ${foreignKeysSql}`;\n        }\n\n        const primaryColumns = table.columns.filter(column => column.isPrimary);\n        if (primaryColumns.length > 0) {\n            const primaryKeyName = this.connection.namingStrategy.primaryKeyName(table, primaryColumns.map(column => column.name));\n            const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n            sql += `, CONSTRAINT \"${primaryKeyName}\" PRIMARY KEY (${columnNames})`;\n        }\n\n        sql += `)`;\n\n        return new Query(sql);\n    }\n\n    /**\n     * Builds drop table sql.\n     */\n    protected dropTableSql(tableOrName: Table|string, ifExist?: boolean): Query {\n        const query = ifExist ? `DROP TABLE IF EXISTS ${this.escapePath(tableOrName)}` : `DROP TABLE ${this.escapePath(tableOrName)}`;\n        return new Query(query);\n    }\n\n    protected createViewSql(view: View): Query {\n        if (typeof view.expression === \"string\") {\n            return new Query(`CREATE VIEW ${this.escapePath(view)} AS ${view.expression}`);\n        } else {\n            return new Query(`CREATE VIEW ${this.escapePath(view)} AS ${view.expression(this.connection).getQuery()}`);\n        }\n    }\n\n    protected async insertViewDefinitionSql(view: View): Promise<Query> {\n        let { schema, tableName: name } = this.driver.parseTableName(view);\n\n        if (!schema) {\n            schema = await this.getCurrentSchema();\n        }\n\n        const expression = typeof view.expression === \"string\" ? view.expression.trim() : view.expression(this.connection).getQuery();\n        return this.insertTypeormMetadataSql({\n            type: MetadataTableType.VIEW,\n            schema: schema,\n            name: name,\n            value: expression\n        });\n    }\n\n    /**\n     * Builds drop view sql.\n     */\n    protected dropViewSql(viewOrPath: View|string): Query {\n        return new Query(`DROP VIEW ${this.escapePath(viewOrPath)}`);\n    }\n\n    /**\n     * Builds remove view sql.\n     */\n    protected async deleteViewDefinitionSql(viewOrPath: View|string): Promise<Query> {\n        let { schema, tableName: name } = this.driver.parseTableName(viewOrPath);\n\n        if (!schema) {\n            schema = await this.getCurrentSchema();\n        }\n\n        return this.deleteTypeormMetadataSql({ type: MetadataTableType.VIEW, schema, name });\n    }\n\n    protected addColumnSql(table: Table, column: TableColumn): string {\n        return `ALTER TABLE ${this.escapePath(table)} ADD (${this.buildCreateColumnSql(column)})`;\n    }\n\n    protected dropColumnSql(table: Table, column: TableColumn): string {\n        return `ALTER TABLE ${this.escapePath(table)} DROP (\"${column.name}\")`;\n    }\n\n    /**\n     * Builds create index sql.\n     */\n    protected createIndexSql(table: Table, index: TableIndex): Query {\n        const columns = index.columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n        let indexType = \"\";\n        if (index.isUnique) {\n            indexType += \"UNIQUE \";\n        }\n        if (index.isFulltext) {\n            indexType += \"FULLTEXT \";\n        }\n\n        return new Query(`CREATE ${indexType}INDEX \"${index.name}\" ON ${this.escapePath(table)} (${columns}) ${index.where ? \"WHERE \" + index.where : \"\"}`);\n    }\n\n    /**\n     * Builds drop index sql.\n     */\n    protected dropIndexSql(table: Table, indexOrName: TableIndex|string): Query {\n        let indexName = indexOrName instanceof TableIndex ? indexOrName.name : indexOrName;\n        const parsedTableName = this.driver.parseTableName(table);\n\n        if (!parsedTableName.schema) {\n            return new Query(`DROP INDEX \"${indexName}\"`);\n        } else {\n            return new Query(`DROP INDEX \"${parsedTableName.schema}\".\"${indexName}\"`);\n        }\n    }\n\n    /**\n     * Builds create primary key sql.\n     */\n    protected createPrimaryKeySql(table: Table, columnNames: string[]): Query {\n        const primaryKeyName = this.connection.namingStrategy.primaryKeyName(table, columnNames);\n        const columnNamesString = columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n        return new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${primaryKeyName}\" PRIMARY KEY (${columnNamesString})`);\n    }\n\n    /**\n     * Builds drop primary key sql.\n     */\n    protected dropPrimaryKeySql(table: Table): Query {\n        const columnNames = table.primaryColumns.map(column => column.name);\n        const primaryKeyName = this.connection.namingStrategy.primaryKeyName(table, columnNames);\n        return new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${primaryKeyName}\"`);\n    }\n\n    /**\n     * Builds create check constraint sql.\n     */\n    protected createCheckConstraintSql(table: Table, checkConstraint: TableCheck): Query {\n        return new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${checkConstraint.name}\" CHECK (${checkConstraint.expression})`);\n    }\n\n    /**\n     * Builds drop check constraint sql.\n     */\n    protected dropCheckConstraintSql(table: Table, checkOrName: TableCheck|string): Query {\n        const checkName = checkOrName instanceof TableCheck ? checkOrName.name : checkOrName;\n        return new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${checkName}\"`);\n    }\n\n    /**\n     * Builds create foreign key sql.\n     */\n    protected createForeignKeySql(tableOrName: Table|string, foreignKey: TableForeignKey): Query {\n        const columnNames = foreignKey.columnNames.map(column => `\"` + column + `\"`).join(\", \");\n        const referencedColumnNames = foreignKey.referencedColumnNames.map(column => `\"` + column + `\"`).join(\",\");\n        let sql = `ALTER TABLE ${this.escapePath(tableOrName)} ADD CONSTRAINT \"${foreignKey.name}\" FOREIGN KEY (${columnNames}) ` +\n            `REFERENCES ${this.escapePath(this.getTablePath(foreignKey))}(${referencedColumnNames})`;\n\n        // SAP HANA does not have \"NO ACTION\" option for FK's\n        if (foreignKey.onDelete) {\n            const onDelete = foreignKey.onDelete === \"NO ACTION\" ? \"RESTRICT\" : foreignKey.onDelete;\n            sql += ` ON DELETE ${onDelete}`;\n        }\n        if (foreignKey.onUpdate) {\n            const onUpdate = foreignKey.onUpdate === \"NO ACTION\" ? \"RESTRICT\" : foreignKey.onUpdate;\n            sql += ` ON UPDATE ${onUpdate}`;\n        }\n\n        return new Query(sql);\n    }\n\n    /**\n     * Builds drop foreign key sql.\n     */\n    protected dropForeignKeySql(tableOrName: Table|string, foreignKeyOrName: TableForeignKey|string): Query {\n        const foreignKeyName = foreignKeyOrName instanceof TableForeignKey ? foreignKeyOrName.name : foreignKeyOrName;\n        return new Query(`ALTER TABLE ${this.escapePath(tableOrName)} DROP CONSTRAINT \"${foreignKeyName}\"`);\n    }\n\n    /**\n     * Escapes given table or view path.\n     */\n    protected escapePath(target: Table|View|string): string {\n        const { schema, tableName } = this.driver.parseTableName(target);\n\n        if (schema) {\n            return `\"${schema}\".\"${tableName}\"`;\n        }\n\n        return `\"${tableName}\"`;\n    }\n\n    /**\n     * Concat database name and schema name to the foreign key name.\n     * Needs because FK name is relevant to the schema and database.\n     */\n    protected buildForeignKeyName(fkName: string, schemaName: string|undefined, dbName: string|undefined): string {\n        let joinedFkName = fkName;\n        if (schemaName)\n            joinedFkName = schemaName + \".\" + joinedFkName;\n        if (dbName)\n            joinedFkName = dbName + \".\" + joinedFkName;\n\n        return joinedFkName;\n    }\n\n    /**\n     * Removes parenthesis around default value.\n     * Sql server returns default value with parenthesis around, e.g.\n     *  ('My text') - for string\n     *  ((1)) - for number\n     *  (newsequentialId()) - for function\n     */\n    protected removeParenthesisFromDefault(defaultValue: any): any {\n        if (defaultValue.substr(0, 1) !== \"(\")\n            return defaultValue;\n        const normalizedDefault = defaultValue.substr(1, defaultValue.lastIndexOf(\")\") - 1);\n        return this.removeParenthesisFromDefault(normalizedDefault);\n    }\n\n    /**\n     * Builds a query for create column.\n     */\n    protected buildCreateColumnSql(column: TableColumn) {\n        let c = `\"${column.name}\" ` + this.connection.driver.createFullType(column);\n        if (column.charset)\n            c += \" CHARACTER SET \" + column.charset;\n        if (column.collation)\n            c += \" COLLATE \" + column.collation;\n        if (column.default !== undefined && column.default !== null) // DEFAULT must be placed before NOT NULL\n            c += \" DEFAULT \" + column.default;\n        if (column.isNullable !== true && !column.isGenerated) // NOT NULL is not supported with GENERATED\n            c += \" NOT NULL\";\n        if (column.isGenerated === true && column.generationStrategy === \"increment\")\n            c += \" GENERATED ALWAYS AS IDENTITY\";\n\n        return c;\n    }\n\n}\n"],"sourceRoot":"../.."}