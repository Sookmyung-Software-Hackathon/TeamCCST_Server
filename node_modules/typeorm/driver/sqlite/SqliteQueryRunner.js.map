{"version":3,"sources":["../../src/driver/sqlite/SqliteQueryRunner.ts"],"names":[],"mappings":"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","file":"SqliteQueryRunner.js","sourcesContent":["import {QueryRunnerAlreadyReleasedError} from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport {QueryFailedError} from \"../../error/QueryFailedError\";\nimport {AbstractSqliteQueryRunner} from \"../sqlite-abstract/AbstractSqliteQueryRunner\";\nimport {SqliteConnectionOptions} from \"./SqliteConnectionOptions\";\nimport {SqliteDriver} from \"./SqliteDriver\";\nimport {Broadcaster} from \"../../subscriber/Broadcaster\";\nimport { ConnectionIsNotSetError } from '../../error/ConnectionIsNotSetError';\nimport { QueryResult } from \"../../query-runner/QueryResult\";\n\n/**\n * Runs queries on a single sqlite database connection.\n *\n * Does not support compose primary keys with autoincrement field.\n * todo: need to throw exception for this case.\n */\nexport class SqliteQueryRunner extends AbstractSqliteQueryRunner {\n\n    /**\n     * Database driver used by connection.\n     */\n    driver: SqliteDriver;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(driver: SqliteDriver) {\n        super();\n        this.driver = driver;\n        this.connection = driver.connection;\n        this.broadcaster = new Broadcaster(this);\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    query(query: string, parameters?: any[], useStructuredResult = false): Promise<any> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const connection = this.driver.connection;\n        const options = connection.options as SqliteConnectionOptions;\n        const maxQueryExecutionTime = this.driver.options.maxQueryExecutionTime;\n\n        if (!connection.isConnected){\n            throw new ConnectionIsNotSetError('sqlite')\n        }\n\n        return new Promise(async (ok, fail) => {\n\n            const databaseConnection = await this.connect();\n            this.driver.connection.logger.logQuery(query, parameters, this);\n            const queryStartTime = +new Date();\n            const isInsertQuery = query.startsWith(\"INSERT \");\n            const isDeleteQuery = query.startsWith(\"DELETE \");\n            const isUpdateQuery = query.startsWith(\"UPDATE \");\n\n            const execute = async () => {\n                if (isInsertQuery || isDeleteQuery || isUpdateQuery) {\n                    await databaseConnection.run(query, parameters, handler);\n                } else {\n                    await databaseConnection.all(query, parameters, handler);\n                }\n            };\n\n            const handler = function (err: any, rows: any) {\n                if (err && err.toString().indexOf(\"SQLITE_BUSY:\") !== -1) {\n                    if (typeof options.busyErrorRetry === \"number\" && options.busyErrorRetry > 0) {\n                        setTimeout(execute, options.busyErrorRetry);\n                        return;\n                    }\n                }\n\n                // log slow queries if maxQueryExecution time is set\n                const queryEndTime = +new Date();\n                const queryExecutionTime = queryEndTime - queryStartTime;\n                if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)\n                    connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);\n\n                if (err) {\n                    connection.logger.logQueryError(err, query, parameters, this);\n                    fail(new QueryFailedError(query, parameters, err));\n                } else {\n                    const result = new QueryResult();\n\n                    if (isInsertQuery) {\n                        result.raw = this[\"lastID\"];\n                    } else {\n                        result.raw = rows;\n                    }\n\n                    if (Array.isArray(rows)) {\n\n                        result.records = rows;\n                    }\n\n                    result.affected = this[\"changes\"];\n\n                    if (useStructuredResult) {\n                        ok(result);\n                    } else {\n                        ok(result.raw);\n                    }\n                }\n            };\n\n            await execute();\n        });\n    }\n}\n"],"sourceRoot":"../.."}