"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ProvideWhenOnSyntax = /** @class */ (function () {
    function ProvideWhenOnSyntax(provideWhenSyntax, provideOnSyntax) {
        this._provideWhenSyntax = provideWhenSyntax;
        this._provideOnSyntax = provideOnSyntax;
    }
    ProvideWhenOnSyntax.prototype.when = function (constraint) {
        return this._provideWhenSyntax.when(constraint);
    };
    ProvideWhenOnSyntax.prototype.whenTargetNamed = function (name) {
        return this._provideWhenSyntax.whenTargetNamed(name);
    };
    ProvideWhenOnSyntax.prototype.whenTargetTagged = function (tag, value) {
        return this._provideWhenSyntax.whenTargetTagged(tag, value);
    };
    ProvideWhenOnSyntax.prototype.whenInjectedInto = function (parent) {
        return this._provideWhenSyntax.whenInjectedInto(parent);
    };
    ProvideWhenOnSyntax.prototype.whenParentNamed = function (name) {
        return this._provideWhenSyntax.whenParentNamed(name);
    };
    ProvideWhenOnSyntax.prototype.whenParentTagged = function (tag, value) {
        return this._provideWhenSyntax.whenParentTagged(tag, value);
    };
    ProvideWhenOnSyntax.prototype.whenAnyAncestorIs = function (ancestor) {
        return this._provideWhenSyntax.whenAnyAncestorIs(ancestor);
    };
    ProvideWhenOnSyntax.prototype.whenNoAncestorIs = function (ancestor) {
        return this._provideWhenSyntax.whenNoAncestorIs(ancestor);
    };
    ProvideWhenOnSyntax.prototype.whenAnyAncestorNamed = function (name) {
        return this._provideWhenSyntax.whenAnyAncestorNamed(name);
    };
    ProvideWhenOnSyntax.prototype.whenAnyAncestorTagged = function (tag, value) {
        return this._provideWhenSyntax.whenAnyAncestorTagged(tag, value);
    };
    ProvideWhenOnSyntax.prototype.whenNoAncestorNamed = function (name) {
        return this._provideWhenSyntax.whenNoAncestorNamed(name);
    };
    ProvideWhenOnSyntax.prototype.whenNoAncestorTagged = function (tag, value) {
        return this._provideWhenSyntax.whenNoAncestorTagged(tag, value);
    };
    ProvideWhenOnSyntax.prototype.whenAnyAncestorMatches = function (constraint) {
        return this._provideWhenSyntax.whenAnyAncestorMatches(constraint);
    };
    ProvideWhenOnSyntax.prototype.whenNoAncestorMatches = function (constraint) {
        return this._provideWhenSyntax.whenNoAncestorMatches(constraint);
    };
    ProvideWhenOnSyntax.prototype.onActivation = function (fn) {
        return this._provideOnSyntax.onActivation(fn);
    };
    ProvideWhenOnSyntax.prototype.done = function (force) {
        return this._provideWhenSyntax.done(force);
    };
    return ProvideWhenOnSyntax;
}());
exports.default = ProvideWhenOnSyntax;
