define(["require", "exports", "./provide_on_syntax", "./provide_done_syntax"], function (require, exports, provide_on_syntax_1, provide_done_syntax_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ProvideWhenSyntax = /** @class */ (function () {
        function ProvideWhenSyntax(bindingWhenSyntax, provideDoneSyntax) {
            this._bindingWhenSyntax = bindingWhenSyntax;
            this._provideDoneSyntax = provideDoneSyntax;
        }
        ProvideWhenSyntax.prototype.when = function (constraint) {
            var _this = this;
            var bindingOnSyntax = function (bind, target) {
                return _this._bindingWhenSyntax(bind, target).when(constraint);
            };
            var whenDoneSyntax = new provide_done_syntax_1.default(bindingOnSyntax);
            return new provide_on_syntax_1.default(bindingOnSyntax, whenDoneSyntax);
        };
        ProvideWhenSyntax.prototype.whenTargetNamed = function (name) {
            var _this = this;
            var bindingOnSyntax = function (bind, target) {
                return _this._bindingWhenSyntax(bind, target).whenTargetNamed(name);
            };
            var whenDoneSyntax = new provide_done_syntax_1.default(bindingOnSyntax);
            return new provide_on_syntax_1.default(bindingOnSyntax, whenDoneSyntax);
        };
        ProvideWhenSyntax.prototype.whenTargetTagged = function (tag, value) {
            var _this = this;
            var bindingOnSyntax = function (bind, target) {
                return _this._bindingWhenSyntax(bind, target).whenTargetTagged(tag, value);
            };
            var whenDoneSyntax = new provide_done_syntax_1.default(bindingOnSyntax);
            return new provide_on_syntax_1.default(bindingOnSyntax, whenDoneSyntax);
        };
        ProvideWhenSyntax.prototype.whenInjectedInto = function (parent) {
            var _this = this;
            var bindingOnSyntax = function (bind, target) {
                return _this._bindingWhenSyntax(bind, target).whenInjectedInto(parent);
            };
            var whenDoneSyntax = new provide_done_syntax_1.default(bindingOnSyntax);
            return new provide_on_syntax_1.default(bindingOnSyntax, whenDoneSyntax);
        };
        ProvideWhenSyntax.prototype.whenParentNamed = function (name) {
            var _this = this;
            var bindingOnSyntax = function (bind, target) {
                return _this._bindingWhenSyntax(bind, target).whenParentNamed(name);
            };
            var whenDoneSyntax = new provide_done_syntax_1.default(bindingOnSyntax);
            return new provide_on_syntax_1.default(bindingOnSyntax, whenDoneSyntax);
        };
        ProvideWhenSyntax.prototype.whenParentTagged = function (tag, value) {
            var _this = this;
            var bindingOnSyntax = function (bind, target) {
                return _this._bindingWhenSyntax(bind, target).whenParentTagged(tag, value);
            };
            var whenDoneSyntax = new provide_done_syntax_1.default(bindingOnSyntax);
            return new provide_on_syntax_1.default(bindingOnSyntax, whenDoneSyntax);
        };
        ProvideWhenSyntax.prototype.whenAnyAncestorIs = function (ancestor) {
            var _this = this;
            var bindingOnSyntax = function (bind, target) {
                return _this._bindingWhenSyntax(bind, target).whenAnyAncestorIs(ancestor);
            };
            var whenDoneSyntax = new provide_done_syntax_1.default(bindingOnSyntax);
            return new provide_on_syntax_1.default(bindingOnSyntax, whenDoneSyntax);
        };
        ProvideWhenSyntax.prototype.whenNoAncestorIs = function (ancestor) {
            var _this = this;
            var bindingOnSyntax = function (bind, target) {
                return _this._bindingWhenSyntax(bind, target).whenNoAncestorIs(ancestor);
            };
            var whenDoneSyntax = new provide_done_syntax_1.default(bindingOnSyntax);
            return new provide_on_syntax_1.default(bindingOnSyntax, whenDoneSyntax);
        };
        ProvideWhenSyntax.prototype.whenAnyAncestorNamed = function (name) {
            var _this = this;
            var bindingOnSyntax = function (bind, target) {
                return _this._bindingWhenSyntax(bind, target).whenAnyAncestorNamed(name);
            };
            var whenDoneSyntax = new provide_done_syntax_1.default(bindingOnSyntax);
            return new provide_on_syntax_1.default(bindingOnSyntax, whenDoneSyntax);
        };
        ProvideWhenSyntax.prototype.whenAnyAncestorTagged = function (tag, value) {
            var _this = this;
            var bindingOnSyntax = function (bind, target) {
                return _this._bindingWhenSyntax(bind, target).whenAnyAncestorTagged(tag, value);
            };
            var whenDoneSyntax = new provide_done_syntax_1.default(bindingOnSyntax);
            return new provide_on_syntax_1.default(bindingOnSyntax, whenDoneSyntax);
        };
        ProvideWhenSyntax.prototype.whenNoAncestorNamed = function (name) {
            var _this = this;
            var bindingOnSyntax = function (bind, target) {
                return _this._bindingWhenSyntax(bind, target).whenNoAncestorNamed(name);
            };
            var whenDoneSyntax = new provide_done_syntax_1.default(bindingOnSyntax);
            return new provide_on_syntax_1.default(bindingOnSyntax, whenDoneSyntax);
        };
        ProvideWhenSyntax.prototype.whenNoAncestorTagged = function (tag, value) {
            var _this = this;
            var bindingOnSyntax = function (bind, target) {
                return _this._bindingWhenSyntax(bind, target).whenNoAncestorTagged(tag, value);
            };
            var whenDoneSyntax = new provide_done_syntax_1.default(bindingOnSyntax);
            return new provide_on_syntax_1.default(bindingOnSyntax, whenDoneSyntax);
        };
        ProvideWhenSyntax.prototype.whenAnyAncestorMatches = function (constraint) {
            var _this = this;
            var bindingOnSyntax = function (bind, target) {
                return _this._bindingWhenSyntax(bind, target).whenAnyAncestorMatches(constraint);
            };
            var whenDoneSyntax = new provide_done_syntax_1.default(bindingOnSyntax);
            return new provide_on_syntax_1.default(bindingOnSyntax, whenDoneSyntax);
        };
        ProvideWhenSyntax.prototype.whenNoAncestorMatches = function (constraint) {
            var _this = this;
            var bindingOnSyntax = function (bind, target) {
                return _this._bindingWhenSyntax(bind, target).whenNoAncestorMatches(constraint);
            };
            var whenDoneSyntax = new provide_done_syntax_1.default(bindingOnSyntax);
            return new provide_on_syntax_1.default(bindingOnSyntax, whenDoneSyntax);
        };
        ProvideWhenSyntax.prototype.done = function (force) {
            return this._provideDoneSyntax.done(force);
        };
        return ProvideWhenSyntax;
    }());
    exports.default = ProvideWhenSyntax;
});
