{"version":3,"file":"AuthController.js","sourceRoot":"/","sources":["controllers/AuthController.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,yCAAmC;AACnC,+EAA6D;AAC7D,+BAA2J;AAK3J,yDAAsD;AACtD,8CAA+C;AAK/C,IAAa,cAAc,sBAA3B,MAAa,cAAe,SAAQ,iBAAU;IAE1C,YACiC,WAAwB;QAErD,KAAK,EAAE,CAAC;QAFqB,gBAAW,GAAX,WAAW,CAAa;IAGzD,CAAC;IAKY,UAAU,CACX,aAA4B;;YAEpC,IAAI;gBACA,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;gBAEhE,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;gBACpB,OAAO,IAAA,qBAAW,EAAC,MAAM,EAAE,SAAS,EAAE,GAAG,CAAC,CAAC;aAC9C;YAAC,OAAO,CAAC,EAAE;gBACR,MAAM,CAAC,CAAC;aACX;QACL,CAAC;KAAA;IAMY,SAAS,CACV,YAA0B;;YAElC,IAAI;gBACA,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;gBAE9D,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;gBACpB,OAAO,IAAA,qBAAW,EAAC,MAAM,EAAE,QAAQ,EAAE,GAAG,CAAC,CAAC;aAC7C;YAAC,OAAO,CAAC,EAAE;gBACR,MAAM,CAAC,CAAC;aACX;QACL,CAAC;KAAA;CACJ,CAAA;AA7BG;IAHC,IAAA,sBAAe,EAAC,GAAG,EAAE,SAAS,CAAC;IAC/B,IAAA,eAAQ,EAAC,GAAG,EAAE,wBAAwB,CAAC;IACvC,IAAA,WAAI,EAAC,SAAS,CAAC;IAEX,WAAA,IAAA,WAAI,GAAE,CAAA;;;;gDAUV;AAMD;IAJC,IAAA,sBAAe,EAAC,GAAG,EAAE,SAAS,CAAC;IAC/B,IAAA,eAAQ,EAAC,GAAG,EAAE,iCAAiC,CAAC;IAChD,IAAA,eAAQ,EAAC,GAAG,EAAE,yBAAyB,CAAC;IACxC,IAAA,WAAI,EAAC,SAAS,CAAC;IAEX,WAAA,IAAA,WAAI,GAAE,CAAA;;;;+CAUV;AAvCQ,cAAc;IAH1B,IAAA,YAAK,EAAC,OAAO,CAAC;IACd,IAAA,WAAI,EAAC,MAAM,CAAC;IACZ,IAAA,4CAAa,EAAC,gBAAc,CAAC,CAAC,IAAI,EAAE;IAI5B,WAAA,IAAA,kBAAM,EAAC,yBAAW,CAAC,CAAA;qCAAsB,yBAAW;GAHhD,cAAc,CAwC1B;AAxCY,wCAAc","sourcesContent":["import { inject } from 'inversify';\nimport { fluentProvide } from 'inversify-binding-decorators';\nimport { Body, Controller, Delete, Deprecated, Get, Patch, Path, Post, Put, Query, Request, Response, Route, Security, SuccessResponse, Tags } from 'tsoa';\nimport { UserCreateDto } from '../interfaces/auth/UserCreateDto';\nimport { UserLoginDto } from '../interfaces/auth/UserLoginDto';\nimport { UserLoginResponseDto } from '../interfaces/auth/UserLoginResponseDto';\nimport { PostBaseResponseDto } from '../interfaces/common/PostBaseResponseDto';\nimport { AuthService } from '../services/AuthService';\nimport { wrapSuccess } from '../utils/success';\n\n@Route('/auth')\n@Tags('Auth')\n@fluentProvide(AuthController).done()\nexport class AuthController extends Controller{\n    \n    constructor(\n        @inject(AuthService) private authService: AuthService\n    ) {\n        super();\n    }\n\n    @SuccessResponse(201, 'Created')\n    @Response(409, 'Duplicate - 이미 존재하는 유저')\n    @Post('/signup')\n    public async createUser(\n        @Body() userCreateDto: UserCreateDto\n    ): Promise<PostBaseResponseDto> {\n        try {\n            const result = await this.authService.createUser(userCreateDto);\n\n            this.setStatus(201);\n            return wrapSuccess(result, \"회원가입 성공\", 201);\n        } catch (e) {\n            throw e;\n        }\n    }\n\n    @SuccessResponse(451, 'Success')\n    @Response(404, \"Not Found - 이메일에 해당하는 사용자 정보 없음\")\n    @Response(409, \"Invalid - 비밀번호가 올바르지 않음\")\n    @Post('/signin')\n    public async loginUser(\n        @Body() userLoginDto: UserLoginDto\n    ): Promise<UserLoginResponseDto> {\n        try {\n            const result = await this.authService.loginUser(userLoginDto);\n\n            this.setStatus(451);\n            return wrapSuccess(result, \"로그인 성공\", 200);\n        } catch (e) {\n            throw e;\n        }\n    }\n}"]}