{"version":3,"file":"index.js","sourceRoot":"/","sources":["index.ts"],"names":[],"mappings":";;;;;AAAA,4BAA0B;AAC1B,wBAAqB;AACrB,yBAAuB;AACvB,sDAA8B;AAC9B,4CAAiD;AACjD,+BAAqC;AAErC,yCAA8C;AAE9C,MAAM,GAAG,GAAG,IAAA,iBAAO,GAAE,CAAC;AAEtB,GAAG,CAAC,GAAG,CAAC,iBAAO,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;AAC1C,GAAG,CAAC,GAAG,CAAC,iBAAO,CAAC,UAAU,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;AAEjE,IAAI;IACA,IAAA,uBAAc,EAAC,GAAG,CAAC,CAAC;CACvB;AAAC,OAAO,CAAC,EAAE;IACR,MAAA,MAAA,iBAAO,CAAC,OAAO,EAAC,IAAI,mDAAG,CAAC,CAAC,CAAC;CAC7B;AAED,GAAG,CAAC,GAAG,CAAC,SAAS,YAAY,CACzB,GAAQ,EACR,GAAoB,EACpB,GAA2B,EAC3B,IAA0B;IAE1B,IAAI,MAAM,CAAC;IACX,IAAI,QAAQ,CAAC;IACb,IAAI,MAAc,CAAC;IAEnB,IAAI,GAAG,YAAY,oBAAa,EAAE;QAC9B,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,GAAG,CAAC;QAElD,MAAM,GAAG,IAAI,CAAC;QACd,MAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QAExC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC;QACpC,MAAM,GAAG,WAAW,CAAC;KACxB;SAAM;QACH,MAAM,WAAW,GAAgB,IAAA,qBAAa,EAAC,GAAG,CAAC,CAAC;QACpD,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,KAAK,EAAE,GAAG,WAAW,CAAC;QAEnD,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;QACtB,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC;QAC1B,MAAM,GAAG,WAAW,CAAC;KACxB;IAED,IAAI,MAAM,IAAI,GAAG,EAAE;QACf,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC;YACpB,MAAM;YACN,OAAO,EAAE,KAAK;YACd,OAAO,EAAE,uBAAuB;SACnC,CAAC,CAAC;KACN;SAAM;QACH,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC;YACpB,MAAM;YACN,OAAO,EAAE,KAAK;YACd,OAAO,EAAE,MAAM;SAClB,CAAC,CAAC;KACN;IAED,IAAI,EAAE,CAAC;AACX,CAAC,CAAC,CAAA;AAEF,iBAAS,GAAG,CAAC","sourcesContent":["import \"reflect-metadata\";\nimport \"./config/env\"\nimport './config/keys';\nimport express from 'express';\nimport { RegisterRoutes } from \"./routes/routes\";\nimport { ValidateError } from \"tsoa\";\nimport { CustomError } from \"./interfaces/common/CustomError\";\nimport { errorHandling } from \"./utils/error\";\n\nconst app = express();\n\napp.use(express.json({ limit: '100mb' }));\napp.use(express.urlencoded({ limit: '100mb', extended: false }));\n\ntry {\n    RegisterRoutes(app);\n} catch (e) {\n    express.request.next?.(e);\n}\n\napp.use(function errorHandler(\n    err: any,\n    req: express.Request,\n    res: express.Response | any,\n    next: express.NextFunction\n) {\n    let reason;\n    let location;\n    let status: number;\n\n    if (err instanceof ValidateError) {\n        const { status: localStatus, name, fields } = err;\n\n        reason = name;\n        const fieldKey = Object.keys(fields)[0];\n\n        location = fields[fieldKey].message;\n        status = localStatus;\n    } else {\n        const customError: CustomError = errorHandling(err);\n        const { status: localStatus, error } = customError;\n\n        reason = error.reason;\n        location = error.location;\n        status = localStatus;\n    }\n\n    if (status >= 500) {\n        res.status(status).json({\n            status,\n            success: false,\n            message: \"Internal Server Error\"\n        });\n    } else {\n        res.status(status).json({\n            status,\n            success: false,\n            message: reason\n        });\n    }\n\n    next();\n})\n\nexport = app;\n"]}