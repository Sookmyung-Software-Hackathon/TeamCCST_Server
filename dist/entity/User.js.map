{"version":3,"file":"User.js","sourceRoot":"/","sources":["entity/User.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,qCAA+E;AAC/E,gDAA2E;AAG3E,IAAa,IAAI,GAAjB,MAAa,IAAI;IAeP,4BAA4B;;YAC9B,IAAI,CAAC,QAAQ,GAAG,MAAM,IAAA,gCAAqB,EAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC/D,CAAC;KAAA;IAEK,iBAAiB,CAAC,QAAgB;;YACpC,OAAO,MAAM,IAAA,0BAAe,EAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC1D,CAAC;KAAA;CACJ,CAAA;AAnBG;IADC,IAAA,gCAAsB,GAAE;;gCACd;AAGX;IADC,IAAA,gBAAM,GAAE;;kCACI;AAGb;IADC,IAAA,gBAAM,EAAC,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC;;mCACX;AAGd;IADC,IAAA,gBAAM,GAAE;;sCACQ;AAGjB;IADC,IAAA,sBAAY,GAAE;;;;wDAGd;AAjBQ,IAAI;IADhB,IAAA,gBAAM,GAAE;GACI,IAAI,CAsBhB;AAtBY,oBAAI","sourcesContent":["import { Entity, PrimaryGeneratedColumn, Column, BeforeInsert } from \"typeorm\";\nimport { comparePassword, saveEncryptedPassword } from \"../utils/password\";\n\n@Entity()\nexport class User {\n\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column()\n    name: string;\n\n    @Column({ unique: true })\n    email: string;\n\n    @Column()\n    password: string;\n\n    @BeforeInsert()\n    async saveEncryptedPasswordTrigger() {\n        this.password = await saveEncryptedPassword(this.password);\n    }\n\n    async isCorrectPassword(password: string): Promise<boolean> {\n        return await comparePassword(password, this.password);\n    }\n}\n"]}