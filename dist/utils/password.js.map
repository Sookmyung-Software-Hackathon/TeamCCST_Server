{"version":3,"file":"password.js","sourceRoot":"/","sources":["utils/password.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,oDAA4B;AAErB,MAAM,qBAAqB,GAAG,CAAO,QAAgB,EAAE,EAAE;IAC5D,MAAM,UAAU,GAAG,CAAC,CAAC;IAErB,IAAI;QACA,IAAI,CAAC,QAAQ;YAAE,OAAO,QAAQ,CAAC;QAE/B,MAAM,YAAY,GAAG,MAAM,gBAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;QAC7D,IAAI,CAAC,YAAY;YAAE,MAAM,IAAI,KAAK,CAAC,UAAU,CAAC,CAAC;QAE/C,OAAO,YAAY,CAAC;KACvB;IAAC,OAAO,CAAC,EAAE;QACR,MAAM,CAAC,CAAC;KACX;AACL,CAAC,CAAA,CAAA;AAbY,QAAA,qBAAqB,yBAajC;AAEM,MAAM,eAAe,GAAG,CAAO,aAAqB,EAAE,QAAgB,EAAE,EAAE;IAC7E,MAAM,SAAS,GAAG,MAAM,gBAAM,CAAC,OAAO,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC;IAEhE,OAAO,SAAS,CAAC;AACrB,CAAC,CAAA,CAAA;AAJY,QAAA,eAAe,mBAI3B","sourcesContent":["import bcrypt from 'bcrypt';\n\nexport const saveEncryptedPassword = async (password: string) => {\n    const SALT_PARAM = 5;\n\n    try {\n        if (!password) return password;\n\n        const hashedPasswd = await bcrypt.hash(password, SALT_PARAM);\n        if (!hashedPasswd) throw new Error('Password');\n\n        return hashedPasswd;\n    } catch (e) {\n        throw e;\n    }\n}\n\nexport const comparePassword = async (passwordInput: string, password: string) => {\n    const isCorrect = await bcrypt.compare(passwordInput, password);\n\n    return isCorrect;\n}"]}