{"version":3,"file":"AuthService.js","sourceRoot":"/","sources":["services/AuthService.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,qCAAyD;AACzD,iEAA8D;AAG9D,iEAA8D;AAC9D,0CAA+C;AAG/C,IAAa,WAAW,mBAAxB,MAAa,WAAW;IACP,UAAU,CAAC,aAA4B;;YAChD,MAAM,cAAc,GAAG,IAAA,6BAAmB,EAAC,+BAAc,CAAC,CAAC;YAE3D,IAAI;gBACA,MAAM,cAAc,GAAG,MAAM,cAAc,CAAC,OAAO,CAAC;oBAChD,KAAK,EAAE,aAAa,CAAC,KAAK;iBAC7B,CAAC,CAAC;gBAEH,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAA;gBAC3B,IAAI,cAAc;oBAAE,MAAM,IAAA,qBAAa,EAAC,WAAW,CAAC,CAAC;gBAErD,MAAM,OAAO,GAAG,cAAc,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;gBAErD,MAAM,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBAEnC,MAAM,IAAI,GAAG;oBACT,EAAE,EAAE,OAAO,CAAC,EAAE;iBACjB,CAAC;gBAEF,OAAO,IAAI,CAAC;aACf;YAAC,OAAO,CAAC,EAAE;gBACR,MAAM,CAAC,CAAC;aACX;QACL,CAAC;KAAA;IAEY,SAAS,CAAC,YAA0B;;YAC7C,MAAM,cAAc,GAAG,IAAA,6BAAmB,EAAC,+BAAc,CAAC,CAAC;YAE3D,IAAI;gBACA,MAAM,IAAI,GAAG,MAAM,cAAc,CAAC,OAAO,CAAC;oBACtC,KAAK,EAAE,YAAY,CAAC,KAAK;iBAC5B,CAAC,CAAC;gBACH,IAAI,CAAC,IAAI;oBAAE,MAAM,IAAA,qBAAa,EAAC,WAAW,CAAC,CAAC;gBAE5C,IAAI,CAAC,CAAA,MAAM,IAAI,CAAC,iBAAiB,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAA,EAAE;oBACtD,MAAM,IAAA,qBAAa,EAAC,SAAS,CAAC,CAAC;iBAClC;gBAED,MAAM,IAAI,GAAG;oBACT,IAAI,EAAE,IAAI,CAAC,IAAI;oBACf,KAAK,EAAE,IAAI,CAAC,KAAK;iBACpB,CAAC;gBAEF,OAAO,IAAI,CAAC;aACf;YAAC,OAAO,CAAC,EAAE;gBACR,MAAM,CAAC,CAAC;aACX;QACL,CAAC;KAAA;CACJ,CAAA;AAjDY,WAAW;IADvB,IAAA,mCAAgB,EAAC,aAAW,CAAC;GACjB,WAAW,CAiDvB;AAjDY,kCAAW","sourcesContent":["import { getCustomRepository, getManager } from \"typeorm\"\nimport { provideSingleton } from \"../config/provideSingleton\";\nimport { UserCreateDto } from \"../interfaces/auth/UserCreateDto\";\nimport { UserLoginDto } from \"../interfaces/auth/UserLoginDto\";\nimport { UserRepository } from \"../repository/UserRepository\";\nimport { generateError } from \"../utils/error\";\n\n@provideSingleton(AuthService)\nexport class AuthService {\n    public async createUser(userCreateDto: UserCreateDto) {\n        const userRepository = getCustomRepository(UserRepository);\n\n        try {\n            const existCheckUser = await userRepository.findOne({\n                email: userCreateDto.email\n            });\n\n            console.log(existCheckUser)\n            if (existCheckUser) throw generateError('Duplicate');\n\n            const newUser = userRepository.create(userCreateDto);\n\n            await userRepository.save(newUser);\n\n            const data = {\n                id: newUser.id\n            };\n\n            return data;\n        } catch (e) {\n            throw e;\n        }\n    }\n\n    public async loginUser(userLoginDto: UserLoginDto) {\n        const userRepository = getCustomRepository(UserRepository);\n\n        try {\n            const user = await userRepository.findOne({\n                email: userLoginDto.email\n            });\n            if (!user) throw generateError('Not Found');\n\n            if (!await user.isCorrectPassword(userLoginDto.password)) {\n                throw generateError('Invalid');\n            }\n\n            const data = {\n                name: user.name,\n                email: user.email\n            };\n\n            return data;\n        } catch (e) {\n            throw e;\n        }\n    }\n}"]}